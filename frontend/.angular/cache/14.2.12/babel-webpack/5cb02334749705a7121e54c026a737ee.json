{"ast":null,"code":"import _asyncToGenerator from \"D:/git projects/DD/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Injectable, Inject, NgModule, Optional, SkipSelf, Directive, Input } from '@angular/core';\nimport { BehaviorSubject, ReplaySubject, AsyncSubject, isObservable } from 'rxjs';\nimport { skip, filter, take } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\n\nclass BaseLoginProvider {\n  constructor() {}\n\n  loadScript(id, src, onload, parentElement = null) {\n    // get document if platform is only browser\n    if (typeof document !== 'undefined' && !document.getElementById(id)) {\n      let signInJS = document.createElement('script');\n      signInJS.async = true;\n      signInJS.src = src;\n      signInJS.onload = onload;\n\n      if (!parentElement) {\n        parentElement = document.head;\n      }\n\n      parentElement.appendChild(signInJS);\n    }\n  }\n\n}\n\nclass SocialUser {}\n\nconst defaultInitOptions = {\n  oneTapEnabled: true\n};\n\nclass GoogleLoginProvider extends BaseLoginProvider {\n  static #_ = this.PROVIDER_ID = 'GOOGLE';\n\n  constructor(clientId, initOptions) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = initOptions;\n    this.changeUser = new EventEmitter();\n    this._socialUser = new BehaviorSubject(null);\n    this._accessToken = new BehaviorSubject(null);\n    this._receivedAccessToken = new EventEmitter();\n    this.initOptions = { ...defaultInitOptions,\n      ...this.initOptions\n    }; // emit changeUser events but skip initial value from behaviorSubject\n\n    this._socialUser.pipe(skip(1)).subscribe(this.changeUser); // emit receivedAccessToken but skip initial value from behaviorSubject\n\n\n    this._accessToken.pipe(skip(1)).subscribe(this._receivedAccessToken);\n  }\n\n  initialize(autoLogin) {\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript(GoogleLoginProvider.PROVIDER_ID, 'https://accounts.google.com/gsi/client', () => {\n          google.accounts.id.initialize({\n            client_id: this.clientId,\n            auto_select: autoLogin,\n            callback: ({\n              credential\n            }) => {\n              const socialUser = this.createSocialUser(credential);\n\n              this._socialUser.next(socialUser);\n            },\n            prompt_parent_id: this.initOptions?.prompt_parent_id,\n            itp_support: this.initOptions.oneTapEnabled\n          });\n\n          if (this.initOptions.oneTapEnabled) {\n            this._socialUser.pipe(filter(user => user === null)).subscribe(() => google.accounts.id.prompt(console.debug));\n          }\n\n          if (this.initOptions.scopes) {\n            const scope = this.initOptions.scopes instanceof Array ? this.initOptions.scopes.filter(s => s).join(' ') : this.initOptions.scopes;\n            this._tokenClient = google.accounts.oauth2.initTokenClient({\n              client_id: this.clientId,\n              scope,\n              prompt: this.initOptions.prompt,\n              callback: tokenResponse => {\n                if (tokenResponse.error) {\n                  this._accessToken.error({\n                    code: tokenResponse.error,\n                    description: tokenResponse.error_description,\n                    uri: tokenResponse.error_uri\n                  });\n                } else {\n                  this._accessToken.next(tokenResponse.access_token);\n                }\n              }\n            });\n          }\n\n          resolve();\n        });\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  getLoginStatus() {\n    return new Promise((resolve, reject) => {\n      if (this._socialUser.value) {\n        resolve(this._socialUser.value);\n      } else {\n        reject(`No user is currently logged in with ${GoogleLoginProvider.PROVIDER_ID}`);\n      }\n    });\n  }\n\n  refreshToken() {\n    return new Promise((resolve, reject) => {\n      google.accounts.id.revoke(this._socialUser.value.id, response => {\n        if (response.error) reject(response.error);else resolve(this._socialUser.value);\n      });\n    });\n  }\n\n  getAccessToken() {\n    return new Promise((resolve, reject) => {\n      if (!this._tokenClient) {\n        if (this._socialUser.value) {\n          reject('No token client was instantiated, you should specify some scopes.');\n        } else {\n          reject('You should be logged-in first.');\n        }\n      } else {\n        this._tokenClient.requestAccessToken({\n          hint: this._socialUser.value?.email\n        });\n\n        this._receivedAccessToken.pipe(take(1)).subscribe(resolve);\n      }\n    });\n  }\n\n  revokeAccessToken() {\n    return new Promise((resolve, reject) => {\n      if (!this._tokenClient) {\n        reject('No token client was instantiated, you should specify some scopes.');\n      } else if (!this._accessToken.value) {\n        reject('No access token to revoke');\n      } else {\n        google.accounts.oauth2.revoke(this._accessToken.value, () => {\n          this._accessToken.next(null);\n\n          resolve();\n        });\n      }\n    });\n  }\n\n  signIn() {\n    return Promise.reject('You should not call this method directly for Google, use \"<asl-google-signin-button>\" wrapper ' + 'or generate the button yourself with \"google.accounts.id.renderButton()\" ' + '(https://developers.google.com/identity/gsi/web/guides/display-button#javascript)');\n  }\n\n  signOut() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      google.accounts.id.disableAutoSelect();\n\n      _this._socialUser.next(null);\n    })();\n  }\n\n  createSocialUser(idToken) {\n    const user = new SocialUser();\n    user.idToken = idToken;\n    const payload = this.decodeJwt(idToken);\n    user.id = payload.sub;\n    user.name = payload.name;\n    user.email = payload.email;\n    user.photoUrl = payload.picture;\n    user.firstName = payload['given_name'];\n    user.lastName = payload['family_name'];\n    return user;\n  }\n\n  decodeJwt(idToken) {\n    const base64Url = idToken.split(\".\")[1];\n    const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    const jsonPayload = decodeURIComponent(window.atob(base64).split(\"\").map(function (c) {\n      return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(\"\"));\n    return JSON.parse(jsonPayload);\n  }\n\n}\n/**\n * The service encapsulating the social login functionality. Exposes methods like\n * `signIn`, `signOut`. Also, exposes an `authState` `Observable` that one can\n * subscribe to get the current logged in user information.\n *\n * @dynamic\n */\n\n\nclass SocialAuthService {\n  static #_ = this.ERR_LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found';\n  static #_2 = this.ERR_NOT_LOGGED_IN = 'Not logged in';\n  static #_3 = this.ERR_NOT_INITIALIZED = 'Login providers not ready yet. Are there errors on your console?';\n  static #_4 = this.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN = 'Chosen login provider is not supported for refreshing a token';\n  static #_5 = this.ERR_NOT_SUPPORTED_FOR_ACCESS_TOKEN = 'Chosen login provider is not supported for getting an access token';\n  /** An `Observable` that one can subscribe to get the current logged in user information */\n\n  get authState() {\n    return this._authState.asObservable();\n  }\n  /** An `Observable` to communicate the readiness of the service and associated login providers */\n\n\n  get initState() {\n    return this._initState.asObservable();\n  }\n  /**\n   * @param config A `SocialAuthServiceConfig` object or a `Promise` that resolves to a `SocialAuthServiceConfig` object\n   */\n\n\n  constructor(config, _ngZone, _injector) {\n    this._ngZone = _ngZone;\n    this._injector = _injector;\n    this.providers = new Map();\n    this.autoLogin = false;\n    this._user = null;\n    this._authState = new ReplaySubject(1);\n    /* Consider making this an enum comprising LOADING, LOADED, FAILED etc. */\n\n    this.initialized = false;\n    this._initState = new AsyncSubject();\n\n    if (config instanceof Promise) {\n      config.then(config => {\n        this.initialize(config);\n      });\n    } else {\n      this.initialize(config);\n    }\n  }\n\n  initialize(config) {\n    this.autoLogin = config.autoLogin !== undefined ? config.autoLogin : false;\n    const {\n      onError = console.error\n    } = config;\n    config.providers.forEach(item => {\n      this.providers.set(item.id, 'prototype' in item.provider ? this._injector.get(item.provider) : item.provider);\n    });\n    Promise.all(Array.from(this.providers.values()).map(provider => provider.initialize(this.autoLogin))).then(() => {\n      if (this.autoLogin) {\n        const loginStatusPromises = [];\n        let loggedIn = false;\n        this.providers.forEach((provider, key) => {\n          const promise = provider.getLoginStatus();\n          loginStatusPromises.push(promise);\n          promise.then(user => {\n            this.setUser(user, key);\n            loggedIn = true;\n          }).catch(console.debug);\n        });\n        Promise.all(loginStatusPromises).catch(() => {\n          if (!loggedIn) {\n            this._user = null;\n\n            this._authState.next(null);\n          }\n        });\n      }\n\n      this.providers.forEach((provider, key) => {\n        if (isObservable(provider.changeUser)) {\n          provider.changeUser.subscribe(user => {\n            this._ngZone.run(() => {\n              this.setUser(user, key);\n            });\n          });\n        }\n      });\n    }).catch(error => {\n      onError(error);\n    }).finally(() => {\n      this.initialized = true;\n\n      this._initState.next(this.initialized);\n\n      this._initState.complete();\n    });\n  }\n\n  getAccessToken(providerId) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const providerObject = _this2.providers.get(providerId);\n\n      if (!_this2.initialized) {\n        throw SocialAuthService.ERR_NOT_INITIALIZED;\n      } else if (!providerObject) {\n        throw SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND;\n      } else if (!(providerObject instanceof GoogleLoginProvider)) {\n        throw SocialAuthService.ERR_NOT_SUPPORTED_FOR_ACCESS_TOKEN;\n      }\n\n      return yield providerObject.getAccessToken();\n    })();\n  }\n\n  refreshAuthToken(providerId) {\n    return new Promise((resolve, reject) => {\n      if (!this.initialized) {\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\n      } else {\n        const providerObject = this.providers.get(providerId);\n\n        if (providerObject) {\n          if (typeof providerObject.refreshToken !== 'function') {\n            reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\n          } else {\n            providerObject.refreshToken().then(user => {\n              this.setUser(user, providerId);\n              resolve();\n            }).catch(err => {\n              reject(err);\n            });\n          }\n        } else {\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n\n  refreshAccessToken(providerId) {\n    return new Promise((resolve, reject) => {\n      if (!this.initialized) {\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\n      } else if (providerId !== GoogleLoginProvider.PROVIDER_ID) {\n        reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\n      } else {\n        const providerObject = this.providers.get(providerId);\n\n        if (providerObject instanceof GoogleLoginProvider) {\n          providerObject.revokeAccessToken().then(resolve).catch(reject);\n        } else {\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n  /**\n   * A method used to sign in a user with a specific `LoginProvider`.\n   *\n   * @param providerId Id with which the `LoginProvider` has been registered with the service\n   * @param signInOptions Optional `LoginProvider` specific arguments\n   * @returns A `Promise` that resolves to the authenticated user information\n   */\n\n\n  signIn(providerId, signInOptions) {\n    return new Promise((resolve, reject) => {\n      if (!this.initialized) {\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\n      } else {\n        let providerObject = this.providers.get(providerId);\n\n        if (providerObject) {\n          providerObject.signIn(signInOptions).then(user => {\n            this.setUser(user, providerId);\n            resolve(user);\n          }).catch(err => {\n            reject(err);\n          });\n        } else {\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n  /**\n   * A method used to sign out the currently loggen in user.\n   *\n   * @param revoke Optional parameter to specify whether a hard sign out is to be performed\n   * @returns A `Promise` that resolves if the operation is successful, rejects otherwise\n   */\n\n\n  signOut(revoke = false) {\n    return new Promise((resolve, reject) => {\n      if (!this.initialized) {\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\n      } else if (!this._user) {\n        reject(SocialAuthService.ERR_NOT_LOGGED_IN);\n      } else {\n        let providerId = this._user.provider;\n        let providerObject = this.providers.get(providerId);\n\n        if (providerObject) {\n          providerObject.signOut(revoke).then(() => {\n            resolve();\n            this.setUser(null);\n          }).catch(err => {\n            reject(err);\n          });\n        } else {\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n\n  setUser(user, id) {\n    if (user && id) user.provider = id;\n    this._user = user;\n\n    this._authState.next(user);\n  }\n\n  static #_6 = this.ɵfac = function SocialAuthService_Factory(t) {\n    return new (t || SocialAuthService)(i0.ɵɵinject('SocialAuthServiceConfig'), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i0.Injector));\n  };\n  static #_7 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: SocialAuthService,\n    factory: SocialAuthService.ɵfac,\n    providedIn: 'root'\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SocialAuthService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: ['SocialAuthServiceConfig']\n      }]\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i0.Injector\n    }];\n  }, null);\n})();\n/**\n * The main module of angularx-social-login library.\n */\n\n\nclass SocialLoginModule {\n  static initialize(config) {\n    return {\n      ngModule: SocialLoginModule,\n      providers: [SocialAuthService, {\n        provide: 'SocialAuthServiceConfig',\n        useValue: config\n      }]\n    };\n  }\n\n  constructor(parentModule) {\n    if (parentModule) {\n      throw new Error('SocialLoginModule is already loaded. Import it in the AppModule only');\n    }\n  }\n\n  static #_ = this.ɵfac = function SocialLoginModule_Factory(t) {\n    return new (t || SocialLoginModule)(i0.ɵɵinject(SocialLoginModule, 12));\n  };\n  static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: SocialLoginModule\n  });\n  static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [SocialAuthService],\n    imports: [CommonModule]\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SocialLoginModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      providers: [SocialAuthService]\n    }]\n  }], function () {\n    return [{\n      type: SocialLoginModule,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }];\n  }, null);\n})(); // Simulates login / logout without actually requiring an Internet connection.\n//\n// Useful for certain development situations.\n//\n// For example, if you want to simulate the greatest football referee England has ever produced:\n//\n//  const dummyUser: SocialUser = {\n//     id: '0123456789',\n//     name: 'Howard Webb',\n//     email: 'howard@webb.com',\n//     firstName: 'Howard',\n//     lastName: 'Webb',\n//     authToken: 'dummyAuthToken',\n//     photoUrl: 'https://en.wikipedia.org/wiki/Howard_Webb#/media/File:Howard_Webb_march11.jpg',\n//     provider: 'DUMMY',\n//     idToken: 'dummyIdToken',\n//     authorizationCode: 'dummyAuthCode'\n// };\n//\n//  let config = new AuthServiceConfig([\n//  { ... },\n//  {\n//       id: DummyLoginProvider.PROVIDER_ID,\n//       provider: new DummyLoginProvider(dummyUser)  // Pass your user into the constructor\n//   },\n//  { ... }\n//  ]);\n\n\nclass DummyLoginProvider extends BaseLoginProvider {\n  static #_ = this.PROVIDER_ID = 'DUMMY';\n  static #_2 = this.DEFAULT_USER = {\n    id: '1234567890',\n    name: 'Mickey Mouse',\n    email: 'mickey@mouse.com',\n    firstName: 'Mickey',\n    lastName: 'Mouse',\n    authToken: 'dummyAuthToken',\n    photoUrl: 'https://en.wikipedia.org/wiki/File:Mickey_Mouse.png',\n    provider: 'DUMMY',\n    idToken: 'dummyIdToken',\n    authorizationCode: 'dummyAuthCode',\n    response: {}\n  };\n\n  constructor(dummy) {\n    super();\n\n    if (dummy) {\n      this.dummy = dummy;\n    } else {\n      this.dummy = DummyLoginProvider.DEFAULT_USER;\n    } // Start not logged in\n\n\n    this.loggedIn = false;\n  }\n\n  getLoginStatus() {\n    return new Promise((resolve, reject) => {\n      if (this.loggedIn) {\n        resolve(this.dummy);\n      } else {\n        reject('No user is currently logged in.');\n      }\n    });\n  }\n\n  initialize() {\n    return new Promise((resolve, reject) => {\n      resolve();\n    });\n  }\n\n  signIn() {\n    return new Promise((resolve, reject) => {\n      this.loggedIn = true;\n      resolve(this.dummy);\n    });\n  }\n\n  signOut(revoke) {\n    return new Promise((resolve, reject) => {\n      this.loggedIn = false;\n      resolve();\n    });\n  }\n\n}\n\nclass FacebookLoginProvider extends BaseLoginProvider {\n  static #_ = this.PROVIDER_ID = 'FACEBOOK';\n\n  constructor(clientId, initOptions = {}) {\n    super();\n    this.clientId = clientId;\n    this.requestOptions = {\n      scope: 'email,public_profile',\n      locale: 'en_US',\n      fields: 'name,email,picture,first_name,last_name',\n      version: 'v10.0'\n    };\n    this.requestOptions = { ...this.requestOptions,\n      ...initOptions\n    };\n  }\n\n  initialize() {\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript(FacebookLoginProvider.PROVIDER_ID, `//connect.facebook.net/${this.requestOptions.locale}/sdk.js`, () => {\n          FB.init({\n            appId: this.clientId,\n            autoLogAppEvents: true,\n            cookie: true,\n            xfbml: true,\n            version: this.requestOptions.version\n          });\n          resolve();\n        });\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  getLoginStatus() {\n    return new Promise((resolve, reject) => {\n      FB.getLoginStatus(response => {\n        if (response.status === 'connected') {\n          let authResponse = response.authResponse;\n          FB.api(`/me?fields=${this.requestOptions.fields}`, fbUser => {\n            let user = new SocialUser();\n            user.id = fbUser.id;\n            user.name = fbUser.name;\n            user.email = fbUser.email;\n            user.photoUrl = 'https://graph.facebook.com/' + fbUser.id + '/picture?type=normal&access_token=' + authResponse.accessToken;\n            user.firstName = fbUser.first_name;\n            user.lastName = fbUser.last_name;\n            user.authToken = authResponse.accessToken;\n            user.response = fbUser;\n            resolve(user);\n          });\n        } else {\n          reject(`No user is currently logged in with ${FacebookLoginProvider.PROVIDER_ID}`);\n        }\n      });\n    });\n  }\n\n  signIn(signInOptions) {\n    const options = { ...this.requestOptions,\n      ...signInOptions\n    };\n    return new Promise((resolve, reject) => {\n      FB.login(response => {\n        if (response.authResponse) {\n          let authResponse = response.authResponse;\n          FB.api(`/me?fields=${options.fields}`, fbUser => {\n            let user = new SocialUser();\n            user.id = fbUser.id;\n            user.name = fbUser.name;\n            user.email = fbUser.email;\n            user.photoUrl = 'https://graph.facebook.com/' + fbUser.id + '/picture?type=normal';\n            user.firstName = fbUser.first_name;\n            user.lastName = fbUser.last_name;\n            user.authToken = authResponse.accessToken;\n            user.response = fbUser;\n            resolve(user);\n          });\n        } else {\n          reject('User cancelled login or did not fully authorize.');\n        }\n      }, options);\n    });\n  }\n\n  signOut() {\n    return new Promise((resolve, reject) => {\n      FB.logout(response => {\n        resolve();\n      });\n    });\n  }\n\n}\n\nclass AmazonLoginProvider extends BaseLoginProvider {\n  static #_ = this.PROVIDER_ID = 'AMAZON';\n\n  constructor(clientId, initOptions = {\n    scope: 'profile',\n    scope_data: {\n      profile: {\n        essential: false\n      }\n    },\n    redirect_uri: location.origin\n  }) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = initOptions;\n  }\n\n  initialize() {\n    let amazonRoot = null;\n\n    if (document) {\n      amazonRoot = document.createElement('div');\n      amazonRoot.id = 'amazon-root';\n      document.body.appendChild(amazonRoot);\n    }\n\n    window.onAmazonLoginReady = () => {\n      amazon.Login.setClientId(this.clientId);\n    };\n\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript('amazon-login-sdk', 'https://assets.loginwithamazon.com/sdk/na/login1.js', () => {\n          resolve();\n        }, amazonRoot);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  getLoginStatus() {\n    return new Promise((resolve, reject) => {\n      let token = this.retrieveToken();\n\n      if (token) {\n        amazon.Login.retrieveProfile(token, response => {\n          if (response.success) {\n            let user = new SocialUser();\n            user.id = response.profile.CustomerId;\n            user.name = response.profile.Name;\n            user.email = response.profile.PrimaryEmail;\n            user.response = response.profile;\n            resolve(user);\n          } else {\n            reject(response.error);\n          }\n        });\n      } else {\n        reject(`No user is currently logged in with ${AmazonLoginProvider.PROVIDER_ID}`);\n      }\n    });\n  }\n\n  signIn(signInOptions) {\n    const options = { ...this.initOptions,\n      ...signInOptions\n    };\n    return new Promise((resolve, reject) => {\n      amazon.Login.authorize(options, authResponse => {\n        if (authResponse.error) {\n          reject(authResponse.error);\n        } else {\n          amazon.Login.retrieveProfile(authResponse.access_token, response => {\n            let user = new SocialUser();\n            user.id = response.profile.CustomerId;\n            user.name = response.profile.Name;\n            user.email = response.profile.PrimaryEmail;\n            user.authToken = authResponse.access_token;\n            user.response = response.profile;\n            this.persistToken(authResponse.access_token);\n            resolve(user);\n          });\n        }\n      });\n    });\n  }\n\n  signOut() {\n    return new Promise((resolve, reject) => {\n      try {\n        amazon.Login.logout();\n        this.clearToken();\n        resolve();\n      } catch (err) {\n        reject(err.message);\n      }\n    });\n  }\n\n  persistToken(token) {\n    localStorage.setItem(`${AmazonLoginProvider.PROVIDER_ID}_token`, token);\n  }\n\n  retrieveToken() {\n    return localStorage.getItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\n  }\n\n  clearToken() {\n    localStorage.removeItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\n  }\n\n}\n\nconst permissionTypes = {\n  notify: 1,\n  friends: 2,\n  photos: 4,\n  audio: 8,\n  video: 16,\n  offers: 32,\n  questions: 64,\n  pages: 128,\n  links: 256,\n  status: 1024,\n  notes: 2048,\n  messages: 4096,\n  wall: 8192,\n  ads: 32768,\n  offline: 65536,\n  docs: 131072,\n  groups: 262144,\n  notifications: 524288,\n  stats: 1048576,\n  email: 4194304,\n  market: 134217728\n};\n\nclass VKLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions = {\n    fields: 'photo_max,contacts',\n    version: '5.131'\n  }) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = initOptions;\n    this.VK_API_URL = '//vk.com/js/api/openapi.js';\n    this.VK_API_GET_USER = 'users.get';\n  }\n\n  static #_ = this.PROVIDER_ID = 'VK';\n\n  initialize() {\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript(VKLoginProvider.PROVIDER_ID, this.VK_API_URL, () => {\n          VK.init({\n            apiId: this.clientId\n          });\n          resolve();\n        });\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  getLoginStatus() {\n    return new Promise(resolve => this.getLoginStatusInternal(resolve));\n  }\n\n  signIn(permissions) {\n    if (permissions?.includes('offers')) {\n      console.warn('The \"offers\" permission is outdated.');\n    }\n\n    if (permissions?.includes('questions')) {\n      console.warn('The \"questions\" permission is outdated.');\n    }\n\n    if (permissions?.includes('messages')) {\n      console.warn('The \"messages\" permission is unavailable for non-standalone applications.');\n    }\n\n    const scope = permissions?.reduce((accumulator, current) => {\n      const index = Object.keys(permissionTypes).findIndex(pt => pt === current);\n      return index > -1 ? accumulator + permissionTypes[current] : 0;\n    }, 0);\n    return new Promise(resolve => this.signInInternal(resolve, scope));\n  }\n\n  signOut() {\n    return new Promise(resolve => {\n      VK.Auth.logout(() => {\n        resolve();\n      });\n    });\n  }\n\n  signInInternal(resolve, scope) {\n    VK.Auth.login(loginResponse => {\n      if (loginResponse.status === 'connected') {\n        this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n      }\n    }, scope);\n  }\n\n  getUser(userId, token, resolve) {\n    VK.Api.call(this.VK_API_GET_USER, {\n      user_id: userId,\n      fields: this.initOptions.fields,\n      v: this.initOptions.version\n    }, userResponse => {\n      resolve(this.createUser(Object.assign({}, {\n        token\n      }, userResponse.response[0])));\n    });\n  }\n\n  getLoginStatusInternal(resolve) {\n    VK.Auth.getLoginStatus(loginResponse => {\n      if (loginResponse.status === 'connected') {\n        this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n      }\n    });\n  }\n\n  createUser(response) {\n    const user = new SocialUser();\n    user.id = response.id;\n    user.name = `${response.first_name} ${response.last_name}`;\n    user.photoUrl = response.photo_max;\n    user.authToken = response.token;\n    return user;\n  }\n\n}\n/**\n * Protocol modes supported by MSAL.\n */\n\n\nvar ProtocolMode;\n\n(function (ProtocolMode) {\n  ProtocolMode[\"AAD\"] = \"AAD\";\n  ProtocolMode[\"OIDC\"] = \"OIDC\";\n})(ProtocolMode || (ProtocolMode = {}));\n\nconst COMMON_AUTHORITY = 'https://login.microsoftonline.com/common/';\n/**\n * Microsoft Authentication using MSAL v2: https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-browser\n */\n\nclass MicrosoftLoginProvider extends BaseLoginProvider {\n  static #_ = this.PROVIDER_ID = 'MICROSOFT';\n\n  constructor(clientId, initOptions) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = {\n      authority: COMMON_AUTHORITY,\n      scopes: ['openid', 'email', 'profile', 'User.Read'],\n      knownAuthorities: [],\n      protocolMode: ProtocolMode.AAD,\n      clientCapabilities: [],\n      cacheLocation: 'sessionStorage'\n    };\n    this.initOptions = { ...this.initOptions,\n      ...initOptions\n    };\n  }\n\n  initialize() {\n    return new Promise((resolve, reject) => {\n      this.loadScript(MicrosoftLoginProvider.PROVIDER_ID, 'https://alcdn.msauth.net/browser/2.13.1/js/msal-browser.min.js', () => {\n        try {\n          const config = {\n            auth: {\n              clientId: this.clientId,\n              redirectUri: this.initOptions.redirect_uri ?? location.origin,\n              authority: this.initOptions.authority,\n              knownAuthorities: this.initOptions.knownAuthorities,\n              protocolMode: this.initOptions.protocolMode,\n              clientCapabilities: this.initOptions.clientCapabilities\n            },\n            cache: !this.initOptions.cacheLocation ? null : {\n              cacheLocation: this.initOptions.cacheLocation\n            }\n          };\n          this._instance = new msal.PublicClientApplication(config);\n          resolve();\n        } catch (e) {\n          reject(e);\n        }\n      });\n    });\n  }\n\n  getSocialUser(loginResponse) {\n    return new Promise((resolve, reject) => {\n      //After login, use Microsoft Graph API to get user info\n      let meRequest = new XMLHttpRequest();\n\n      meRequest.onreadystatechange = () => {\n        if (meRequest.readyState == 4) {\n          try {\n            if (meRequest.status == 200) {\n              let userInfo = JSON.parse(meRequest.responseText);\n              let user = new SocialUser();\n              user.provider = MicrosoftLoginProvider.PROVIDER_ID;\n              user.id = loginResponse.idToken;\n              user.authToken = loginResponse.accessToken;\n              user.name = loginResponse.idTokenClaims.name;\n              user.email = loginResponse.account.username;\n              user.idToken = loginResponse.idToken;\n              user.response = loginResponse;\n              user.firstName = userInfo.givenName;\n              user.lastName = userInfo.surname;\n              resolve(user);\n            } else {\n              reject(`Error retrieving user info: ${meRequest.status}`);\n            }\n          } catch (err) {\n            reject(err);\n          }\n        }\n      }; //Microsoft Graph ME Endpoint: https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&tabs=http\n\n\n      meRequest.open('GET', 'https://graph.microsoft.com/v1.0/me');\n      meRequest.setRequestHeader('Authorization', `Bearer ${loginResponse.accessToken}`);\n\n      try {\n        meRequest.send();\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  getLoginStatus() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const accounts = _this3._instance.getAllAccounts();\n\n      if (accounts?.length > 0) {\n        const loginResponse = yield _this3._instance.ssoSilent({\n          scopes: _this3.initOptions.scopes,\n          loginHint: accounts[0].username\n        });\n        return yield _this3.getSocialUser(loginResponse);\n      } else {\n        throw `No user is currently logged in with ${MicrosoftLoginProvider.PROVIDER_ID}`;\n      }\n    })();\n  }\n\n  signIn() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const loginResponse = yield _this4._instance.loginPopup({\n        scopes: _this4.initOptions.scopes,\n        prompt: _this4.initOptions.prompt\n      });\n      return yield _this4.getSocialUser(loginResponse);\n    })();\n  }\n\n  signOut(revoke) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const accounts = _this5._instance.getAllAccounts();\n\n      if (accounts?.length > 0) {\n        yield _this5._instance.logoutPopup({\n          account: accounts[0],\n          postLogoutRedirectUri: _this5.initOptions.logout_redirect_uri ?? _this5.initOptions.redirect_uri ?? location.href\n        });\n      }\n    })();\n  }\n\n}\n\nclass GoogleSigninButtonDirective {\n  constructor(el, socialAuthService) {\n    this.type = 'icon';\n    this.size = 'medium';\n    this.text = 'signin_with';\n    this.shape = 'rectangular';\n    this.theme = 'outline';\n    this.logo_alignment = 'left';\n    this.width = '';\n    this.locale = '';\n    socialAuthService.initState.pipe(take(1)).subscribe(() => {\n      Promise.resolve(this.width).then(value => {\n        if (value > '400' || value < '200' && value != '') {\n          Promise.reject('Please note .. max-width 400 , min-width 200 ' + '(https://developers.google.com/identity/gsi/web/tools/configurator)');\n        } else {\n          google.accounts.id.renderButton(el.nativeElement, {\n            type: this.type,\n            size: this.size,\n            text: this.text,\n            width: this.width,\n            shape: this.shape,\n            theme: this.theme,\n            logo_alignment: this.logo_alignment,\n            locale: this.locale\n          });\n        }\n      });\n    });\n  }\n\n  static #_ = this.ɵfac = function GoogleSigninButtonDirective_Factory(t) {\n    return new (t || GoogleSigninButtonDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(SocialAuthService));\n  };\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: GoogleSigninButtonDirective,\n    selectors: [[\"asl-google-signin-button\"]],\n    inputs: {\n      type: \"type\",\n      size: \"size\",\n      text: \"text\",\n      shape: \"shape\",\n      theme: \"theme\",\n      logo_alignment: \"logo_alignment\",\n      width: \"width\",\n      locale: \"locale\"\n    }\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GoogleSigninButtonDirective, [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: 'asl-google-signin-button'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: SocialAuthService\n    }];\n  }, {\n    type: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    text: [{\n      type: Input\n    }],\n    shape: [{\n      type: Input\n    }],\n    theme: [{\n      type: Input\n    }],\n    logo_alignment: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    locale: [{\n      type: Input\n    }]\n  });\n})();\n\nclass GoogleSigninButtonModule {\n  static #_ = this.ɵfac = function GoogleSigninButtonModule_Factory(t) {\n    return new (t || GoogleSigninButtonModule)();\n  };\n  static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: GoogleSigninButtonModule\n  });\n  static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GoogleSigninButtonModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [GoogleSigninButtonDirective],\n      exports: [GoogleSigninButtonDirective]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AmazonLoginProvider, BaseLoginProvider, DummyLoginProvider, FacebookLoginProvider, GoogleLoginProvider, GoogleSigninButtonDirective, GoogleSigninButtonModule, MicrosoftLoginProvider, SocialAuthService, SocialLoginModule, SocialUser, VKLoginProvider };","map":{"version":3,"names":["i0","EventEmitter","Injectable","Inject","NgModule","Optional","SkipSelf","Directive","Input","BehaviorSubject","ReplaySubject","AsyncSubject","isObservable","skip","filter","take","CommonModule","BaseLoginProvider","constructor","loadScript","id","src","onload","parentElement","document","getElementById","signInJS","createElement","async","head","appendChild","SocialUser","defaultInitOptions","oneTapEnabled","GoogleLoginProvider","PROVIDER_ID","clientId","initOptions","changeUser","_socialUser","_accessToken","_receivedAccessToken","pipe","subscribe","initialize","autoLogin","Promise","resolve","reject","google","accounts","client_id","auto_select","callback","credential","socialUser","createSocialUser","next","prompt_parent_id","itp_support","user","prompt","console","debug","scopes","scope","Array","s","join","_tokenClient","oauth2","initTokenClient","tokenResponse","error","code","description","error_description","uri","error_uri","access_token","err","getLoginStatus","value","refreshToken","revoke","response","getAccessToken","requestAccessToken","hint","email","revokeAccessToken","signIn","signOut","disableAutoSelect","idToken","payload","decodeJwt","sub","name","photoUrl","picture","firstName","lastName","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","window","atob","map","c","charCodeAt","toString","slice","JSON","parse","SocialAuthService","ERR_LOGIN_PROVIDER_NOT_FOUND","ERR_NOT_LOGGED_IN","ERR_NOT_INITIALIZED","ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN","ERR_NOT_SUPPORTED_FOR_ACCESS_TOKEN","authState","_authState","asObservable","initState","_initState","config","_ngZone","_injector","providers","Map","_user","initialized","then","undefined","onError","forEach","item","set","provider","get","all","from","values","loginStatusPromises","loggedIn","key","promise","push","setUser","catch","run","finally","complete","providerId","providerObject","refreshAuthToken","refreshAccessToken","signInOptions","ɵfac","NgZone","Injector","ɵprov","type","args","providedIn","decorators","SocialLoginModule","ngModule","provide","useValue","parentModule","Error","ɵmod","ɵinj","imports","DummyLoginProvider","DEFAULT_USER","authToken","authorizationCode","dummy","FacebookLoginProvider","requestOptions","locale","fields","version","FB","init","appId","autoLogAppEvents","cookie","xfbml","status","authResponse","api","fbUser","accessToken","first_name","last_name","options","login","logout","AmazonLoginProvider","scope_data","profile","essential","redirect_uri","location","origin","amazonRoot","body","onAmazonLoginReady","amazon","Login","setClientId","token","retrieveToken","retrieveProfile","success","CustomerId","Name","PrimaryEmail","authorize","persistToken","clearToken","message","localStorage","setItem","getItem","removeItem","permissionTypes","notify","friends","photos","audio","video","offers","questions","pages","links","notes","messages","wall","ads","offline","docs","groups","notifications","stats","market","VKLoginProvider","VK_API_URL","VK_API_GET_USER","VK","apiId","getLoginStatusInternal","permissions","includes","warn","reduce","accumulator","current","index","Object","keys","findIndex","pt","signInInternal","Auth","loginResponse","getUser","session","mid","sid","userId","Api","call","user_id","v","userResponse","createUser","assign","photo_max","ProtocolMode","COMMON_AUTHORITY","MicrosoftLoginProvider","authority","knownAuthorities","protocolMode","AAD","clientCapabilities","cacheLocation","auth","redirectUri","cache","_instance","msal","PublicClientApplication","e","getSocialUser","meRequest","XMLHttpRequest","onreadystatechange","readyState","userInfo","responseText","idTokenClaims","account","username","givenName","surname","open","setRequestHeader","send","getAllAccounts","length","ssoSilent","loginHint","loginPopup","logoutPopup","postLogoutRedirectUri","logout_redirect_uri","href","GoogleSigninButtonDirective","el","socialAuthService","size","text","shape","theme","logo_alignment","width","renderButton","nativeElement","ElementRef","ɵdir","selector","GoogleSigninButtonModule","declarations","exports"],"sources":["D:/git projects/DD/frontend/node_modules/@abacritt/angularx-social-login/fesm2022/abacritt-angularx-social-login.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Injectable, Inject, NgModule, Optional, SkipSelf, Directive, Input } from '@angular/core';\nimport { BehaviorSubject, ReplaySubject, AsyncSubject, isObservable } from 'rxjs';\nimport { skip, filter, take } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\n\nclass BaseLoginProvider {\n    constructor() { }\n    loadScript(id, src, onload, parentElement = null) {\n        // get document if platform is only browser\n        if (typeof document !== 'undefined' && !document.getElementById(id)) {\n            let signInJS = document.createElement('script');\n            signInJS.async = true;\n            signInJS.src = src;\n            signInJS.onload = onload;\n            if (!parentElement) {\n                parentElement = document.head;\n            }\n            parentElement.appendChild(signInJS);\n        }\n    }\n}\n\nclass SocialUser {\n}\n\nconst defaultInitOptions = {\n    oneTapEnabled: true,\n};\nclass GoogleLoginProvider extends BaseLoginProvider {\n    static { this.PROVIDER_ID = 'GOOGLE'; }\n    constructor(clientId, initOptions) {\n        super();\n        this.clientId = clientId;\n        this.initOptions = initOptions;\n        this.changeUser = new EventEmitter();\n        this._socialUser = new BehaviorSubject(null);\n        this._accessToken = new BehaviorSubject(null);\n        this._receivedAccessToken = new EventEmitter();\n        this.initOptions = { ...defaultInitOptions, ...this.initOptions };\n        // emit changeUser events but skip initial value from behaviorSubject\n        this._socialUser.pipe(skip(1)).subscribe(this.changeUser);\n        // emit receivedAccessToken but skip initial value from behaviorSubject\n        this._accessToken.pipe(skip(1)).subscribe(this._receivedAccessToken);\n    }\n    initialize(autoLogin) {\n        return new Promise((resolve, reject) => {\n            try {\n                this.loadScript(GoogleLoginProvider.PROVIDER_ID, 'https://accounts.google.com/gsi/client', () => {\n                    google.accounts.id.initialize({\n                        client_id: this.clientId,\n                        auto_select: autoLogin,\n                        callback: ({ credential }) => {\n                            const socialUser = this.createSocialUser(credential);\n                            this._socialUser.next(socialUser);\n                        },\n                        prompt_parent_id: this.initOptions?.prompt_parent_id,\n                        itp_support: this.initOptions.oneTapEnabled\n                    });\n                    if (this.initOptions.oneTapEnabled) {\n                        this._socialUser\n                            .pipe(filter((user) => user === null))\n                            .subscribe(() => google.accounts.id.prompt(console.debug));\n                    }\n                    if (this.initOptions.scopes) {\n                        const scope = this.initOptions.scopes instanceof Array\n                            ? this.initOptions.scopes.filter((s) => s).join(' ')\n                            : this.initOptions.scopes;\n                        this._tokenClient = google.accounts.oauth2.initTokenClient({\n                            client_id: this.clientId,\n                            scope,\n                            prompt: this.initOptions.prompt,\n                            callback: (tokenResponse) => {\n                                if (tokenResponse.error) {\n                                    this._accessToken.error({\n                                        code: tokenResponse.error,\n                                        description: tokenResponse.error_description,\n                                        uri: tokenResponse.error_uri,\n                                    });\n                                }\n                                else {\n                                    this._accessToken.next(tokenResponse.access_token);\n                                }\n                            },\n                        });\n                    }\n                    resolve();\n                });\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n    getLoginStatus() {\n        return new Promise((resolve, reject) => {\n            if (this._socialUser.value) {\n                resolve(this._socialUser.value);\n            }\n            else {\n                reject(`No user is currently logged in with ${GoogleLoginProvider.PROVIDER_ID}`);\n            }\n        });\n    }\n    refreshToken() {\n        return new Promise((resolve, reject) => {\n            google.accounts.id.revoke(this._socialUser.value.id, (response) => {\n                if (response.error)\n                    reject(response.error);\n                else\n                    resolve(this._socialUser.value);\n            });\n        });\n    }\n    getAccessToken() {\n        return new Promise((resolve, reject) => {\n            if (!this._tokenClient) {\n                if (this._socialUser.value) {\n                    reject('No token client was instantiated, you should specify some scopes.');\n                }\n                else {\n                    reject('You should be logged-in first.');\n                }\n            }\n            else {\n                this._tokenClient.requestAccessToken({\n                    hint: this._socialUser.value?.email,\n                });\n                this._receivedAccessToken.pipe(take(1)).subscribe(resolve);\n            }\n        });\n    }\n    revokeAccessToken() {\n        return new Promise((resolve, reject) => {\n            if (!this._tokenClient) {\n                reject('No token client was instantiated, you should specify some scopes.');\n            }\n            else if (!this._accessToken.value) {\n                reject('No access token to revoke');\n            }\n            else {\n                google.accounts.oauth2.revoke(this._accessToken.value, () => {\n                    this._accessToken.next(null);\n                    resolve();\n                });\n            }\n        });\n    }\n    signIn() {\n        return Promise.reject('You should not call this method directly for Google, use \"<asl-google-signin-button>\" wrapper ' +\n            'or generate the button yourself with \"google.accounts.id.renderButton()\" ' +\n            '(https://developers.google.com/identity/gsi/web/guides/display-button#javascript)');\n    }\n    async signOut() {\n        google.accounts.id.disableAutoSelect();\n        this._socialUser.next(null);\n    }\n    createSocialUser(idToken) {\n        const user = new SocialUser();\n        user.idToken = idToken;\n        const payload = this.decodeJwt(idToken);\n        user.id = payload.sub;\n        user.name = payload.name;\n        user.email = payload.email;\n        user.photoUrl = payload.picture;\n        user.firstName = payload['given_name'];\n        user.lastName = payload['family_name'];\n        return user;\n    }\n    decodeJwt(idToken) {\n        const base64Url = idToken.split(\".\")[1];\n        const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\n        const jsonPayload = decodeURIComponent(window.atob(base64)\n            .split(\"\")\n            .map(function (c) {\n            return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n        })\n            .join(\"\"));\n        return JSON.parse(jsonPayload);\n    }\n}\n\n/**\n * The service encapsulating the social login functionality. Exposes methods like\n * `signIn`, `signOut`. Also, exposes an `authState` `Observable` that one can\n * subscribe to get the current logged in user information.\n *\n * @dynamic\n */\nclass SocialAuthService {\n    static { this.ERR_LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found'; }\n    static { this.ERR_NOT_LOGGED_IN = 'Not logged in'; }\n    static { this.ERR_NOT_INITIALIZED = 'Login providers not ready yet. Are there errors on your console?'; }\n    static { this.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN = 'Chosen login provider is not supported for refreshing a token'; }\n    static { this.ERR_NOT_SUPPORTED_FOR_ACCESS_TOKEN = 'Chosen login provider is not supported for getting an access token'; }\n    /** An `Observable` that one can subscribe to get the current logged in user information */\n    get authState() {\n        return this._authState.asObservable();\n    }\n    /** An `Observable` to communicate the readiness of the service and associated login providers */\n    get initState() {\n        return this._initState.asObservable();\n    }\n    /**\n     * @param config A `SocialAuthServiceConfig` object or a `Promise` that resolves to a `SocialAuthServiceConfig` object\n     */\n    constructor(config, _ngZone, _injector) {\n        this._ngZone = _ngZone;\n        this._injector = _injector;\n        this.providers = new Map();\n        this.autoLogin = false;\n        this._user = null;\n        this._authState = new ReplaySubject(1);\n        /* Consider making this an enum comprising LOADING, LOADED, FAILED etc. */\n        this.initialized = false;\n        this._initState = new AsyncSubject();\n        if (config instanceof Promise) {\n            config.then((config) => {\n                this.initialize(config);\n            });\n        }\n        else {\n            this.initialize(config);\n        }\n    }\n    initialize(config) {\n        this.autoLogin = config.autoLogin !== undefined ? config.autoLogin : false;\n        const { onError = console.error } = config;\n        config.providers.forEach((item) => {\n            this.providers.set(item.id, 'prototype' in item.provider\n                ? this._injector.get(item.provider)\n                : item.provider);\n        });\n        Promise.all(Array.from(this.providers.values()).map((provider) => provider.initialize(this.autoLogin)))\n            .then(() => {\n            if (this.autoLogin) {\n                const loginStatusPromises = [];\n                let loggedIn = false;\n                this.providers.forEach((provider, key) => {\n                    const promise = provider.getLoginStatus();\n                    loginStatusPromises.push(promise);\n                    promise\n                        .then((user) => {\n                        this.setUser(user, key);\n                        loggedIn = true;\n                    })\n                        .catch(console.debug);\n                });\n                Promise.all(loginStatusPromises).catch(() => {\n                    if (!loggedIn) {\n                        this._user = null;\n                        this._authState.next(null);\n                    }\n                });\n            }\n            this.providers.forEach((provider, key) => {\n                if (isObservable(provider.changeUser)) {\n                    provider.changeUser.subscribe((user) => {\n                        this._ngZone.run(() => {\n                            this.setUser(user, key);\n                        });\n                    });\n                }\n            });\n        })\n            .catch((error) => {\n            onError(error);\n        })\n            .finally(() => {\n            this.initialized = true;\n            this._initState.next(this.initialized);\n            this._initState.complete();\n        });\n    }\n    async getAccessToken(providerId) {\n        const providerObject = this.providers.get(providerId);\n        if (!this.initialized) {\n            throw SocialAuthService.ERR_NOT_INITIALIZED;\n        }\n        else if (!providerObject) {\n            throw SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND;\n        }\n        else if (!(providerObject instanceof GoogleLoginProvider)) {\n            throw SocialAuthService.ERR_NOT_SUPPORTED_FOR_ACCESS_TOKEN;\n        }\n        return await providerObject.getAccessToken();\n    }\n    refreshAuthToken(providerId) {\n        return new Promise((resolve, reject) => {\n            if (!this.initialized) {\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\n            }\n            else {\n                const providerObject = this.providers.get(providerId);\n                if (providerObject) {\n                    if (typeof providerObject.refreshToken !== 'function') {\n                        reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\n                    }\n                    else {\n                        providerObject\n                            .refreshToken()\n                            .then((user) => {\n                            this.setUser(user, providerId);\n                            resolve();\n                        })\n                            .catch((err) => {\n                            reject(err);\n                        });\n                    }\n                }\n                else {\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n                }\n            }\n        });\n    }\n    refreshAccessToken(providerId) {\n        return new Promise((resolve, reject) => {\n            if (!this.initialized) {\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\n            }\n            else if (providerId !== GoogleLoginProvider.PROVIDER_ID) {\n                reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\n            }\n            else {\n                const providerObject = this.providers.get(providerId);\n                if (providerObject instanceof GoogleLoginProvider) {\n                    providerObject.revokeAccessToken().then(resolve).catch(reject);\n                }\n                else {\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n                }\n            }\n        });\n    }\n    /**\n     * A method used to sign in a user with a specific `LoginProvider`.\n     *\n     * @param providerId Id with which the `LoginProvider` has been registered with the service\n     * @param signInOptions Optional `LoginProvider` specific arguments\n     * @returns A `Promise` that resolves to the authenticated user information\n     */\n    signIn(providerId, signInOptions) {\n        return new Promise((resolve, reject) => {\n            if (!this.initialized) {\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\n            }\n            else {\n                let providerObject = this.providers.get(providerId);\n                if (providerObject) {\n                    providerObject\n                        .signIn(signInOptions)\n                        .then((user) => {\n                        this.setUser(user, providerId);\n                        resolve(user);\n                    })\n                        .catch((err) => {\n                        reject(err);\n                    });\n                }\n                else {\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n                }\n            }\n        });\n    }\n    /**\n     * A method used to sign out the currently loggen in user.\n     *\n     * @param revoke Optional parameter to specify whether a hard sign out is to be performed\n     * @returns A `Promise` that resolves if the operation is successful, rejects otherwise\n     */\n    signOut(revoke = false) {\n        return new Promise((resolve, reject) => {\n            if (!this.initialized) {\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\n            }\n            else if (!this._user) {\n                reject(SocialAuthService.ERR_NOT_LOGGED_IN);\n            }\n            else {\n                let providerId = this._user.provider;\n                let providerObject = this.providers.get(providerId);\n                if (providerObject) {\n                    providerObject\n                        .signOut(revoke)\n                        .then(() => {\n                        resolve();\n                        this.setUser(null);\n                    })\n                        .catch((err) => {\n                        reject(err);\n                    });\n                }\n                else {\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n                }\n            }\n        });\n    }\n    setUser(user, id) {\n        if (user && id)\n            user.provider = id;\n        this._user = user;\n        this._authState.next(user);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: SocialAuthService, deps: [{ token: 'SocialAuthServiceConfig' }, { token: i0.NgZone }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: SocialAuthService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: SocialAuthService, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: ['SocialAuthServiceConfig']\n                }] }, { type: i0.NgZone }, { type: i0.Injector }]; } });\n\n/**\n * The main module of angularx-social-login library.\n */\nclass SocialLoginModule {\n    static initialize(config) {\n        return {\n            ngModule: SocialLoginModule,\n            providers: [\n                SocialAuthService,\n                {\n                    provide: 'SocialAuthServiceConfig',\n                    useValue: config\n                }\n            ]\n        };\n    }\n    constructor(parentModule) {\n        if (parentModule) {\n            throw new Error('SocialLoginModule is already loaded. Import it in the AppModule only');\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: SocialLoginModule, deps: [{ token: SocialLoginModule, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0\", ngImport: i0, type: SocialLoginModule, imports: [CommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: SocialLoginModule, providers: [SocialAuthService], imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: SocialLoginModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    providers: [SocialAuthService],\n                }]\n        }], ctorParameters: function () { return [{ type: SocialLoginModule, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }]; } });\n\n// Simulates login / logout without actually requiring an Internet connection.\n//\n// Useful for certain development situations.\n//\n// For example, if you want to simulate the greatest football referee England has ever produced:\n//\n//  const dummyUser: SocialUser = {\n//     id: '0123456789',\n//     name: 'Howard Webb',\n//     email: 'howard@webb.com',\n//     firstName: 'Howard',\n//     lastName: 'Webb',\n//     authToken: 'dummyAuthToken',\n//     photoUrl: 'https://en.wikipedia.org/wiki/Howard_Webb#/media/File:Howard_Webb_march11.jpg',\n//     provider: 'DUMMY',\n//     idToken: 'dummyIdToken',\n//     authorizationCode: 'dummyAuthCode'\n// };\n//\n//  let config = new AuthServiceConfig([\n//  { ... },\n//  {\n//       id: DummyLoginProvider.PROVIDER_ID,\n//       provider: new DummyLoginProvider(dummyUser)  // Pass your user into the constructor\n//   },\n//  { ... }\n//  ]);\nclass DummyLoginProvider extends BaseLoginProvider {\n    static { this.PROVIDER_ID = 'DUMMY'; }\n    static { this.DEFAULT_USER = {\n        id: '1234567890',\n        name: 'Mickey Mouse',\n        email: 'mickey@mouse.com',\n        firstName: 'Mickey',\n        lastName: 'Mouse',\n        authToken: 'dummyAuthToken',\n        photoUrl: 'https://en.wikipedia.org/wiki/File:Mickey_Mouse.png',\n        provider: 'DUMMY',\n        idToken: 'dummyIdToken',\n        authorizationCode: 'dummyAuthCode',\n        response: {},\n    }; }\n    constructor(dummy) {\n        super();\n        if (dummy) {\n            this.dummy = dummy;\n        }\n        else {\n            this.dummy = DummyLoginProvider.DEFAULT_USER;\n        }\n        // Start not logged in\n        this.loggedIn = false;\n    }\n    getLoginStatus() {\n        return new Promise((resolve, reject) => {\n            if (this.loggedIn) {\n                resolve(this.dummy);\n            }\n            else {\n                reject('No user is currently logged in.');\n            }\n        });\n    }\n    initialize() {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    }\n    signIn() {\n        return new Promise((resolve, reject) => {\n            this.loggedIn = true;\n            resolve(this.dummy);\n        });\n    }\n    signOut(revoke) {\n        return new Promise((resolve, reject) => {\n            this.loggedIn = false;\n            resolve();\n        });\n    }\n}\n\nclass FacebookLoginProvider extends BaseLoginProvider {\n    static { this.PROVIDER_ID = 'FACEBOOK'; }\n    constructor(clientId, initOptions = {}) {\n        super();\n        this.clientId = clientId;\n        this.requestOptions = {\n            scope: 'email,public_profile',\n            locale: 'en_US',\n            fields: 'name,email,picture,first_name,last_name',\n            version: 'v10.0',\n        };\n        this.requestOptions = {\n            ...this.requestOptions,\n            ...initOptions,\n        };\n    }\n    initialize() {\n        return new Promise((resolve, reject) => {\n            try {\n                this.loadScript(FacebookLoginProvider.PROVIDER_ID, `//connect.facebook.net/${this.requestOptions.locale}/sdk.js`, () => {\n                    FB.init({\n                        appId: this.clientId,\n                        autoLogAppEvents: true,\n                        cookie: true,\n                        xfbml: true,\n                        version: this.requestOptions.version,\n                    });\n                    resolve();\n                });\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n    getLoginStatus() {\n        return new Promise((resolve, reject) => {\n            FB.getLoginStatus((response) => {\n                if (response.status === 'connected') {\n                    let authResponse = response.authResponse;\n                    FB.api(`/me?fields=${this.requestOptions.fields}`, (fbUser) => {\n                        let user = new SocialUser();\n                        user.id = fbUser.id;\n                        user.name = fbUser.name;\n                        user.email = fbUser.email;\n                        user.photoUrl =\n                            'https://graph.facebook.com/' +\n                                fbUser.id +\n                                '/picture?type=normal&access_token=' +\n                                authResponse.accessToken;\n                        user.firstName = fbUser.first_name;\n                        user.lastName = fbUser.last_name;\n                        user.authToken = authResponse.accessToken;\n                        user.response = fbUser;\n                        resolve(user);\n                    });\n                }\n                else {\n                    reject(`No user is currently logged in with ${FacebookLoginProvider.PROVIDER_ID}`);\n                }\n            });\n        });\n    }\n    signIn(signInOptions) {\n        const options = { ...this.requestOptions, ...signInOptions };\n        return new Promise((resolve, reject) => {\n            FB.login((response) => {\n                if (response.authResponse) {\n                    let authResponse = response.authResponse;\n                    FB.api(`/me?fields=${options.fields}`, (fbUser) => {\n                        let user = new SocialUser();\n                        user.id = fbUser.id;\n                        user.name = fbUser.name;\n                        user.email = fbUser.email;\n                        user.photoUrl =\n                            'https://graph.facebook.com/' +\n                                fbUser.id +\n                                '/picture?type=normal';\n                        user.firstName = fbUser.first_name;\n                        user.lastName = fbUser.last_name;\n                        user.authToken = authResponse.accessToken;\n                        user.response = fbUser;\n                        resolve(user);\n                    });\n                }\n                else {\n                    reject('User cancelled login or did not fully authorize.');\n                }\n            }, options);\n        });\n    }\n    signOut() {\n        return new Promise((resolve, reject) => {\n            FB.logout((response) => {\n                resolve();\n            });\n        });\n    }\n}\n\nclass AmazonLoginProvider extends BaseLoginProvider {\n    static { this.PROVIDER_ID = 'AMAZON'; }\n    constructor(clientId, initOptions = {\n        scope: 'profile',\n        scope_data: {\n            profile: { essential: false },\n        },\n        redirect_uri: location.origin,\n    }) {\n        super();\n        this.clientId = clientId;\n        this.initOptions = initOptions;\n    }\n    initialize() {\n        let amazonRoot = null;\n        if (document) {\n            amazonRoot = document.createElement('div');\n            amazonRoot.id = 'amazon-root';\n            document.body.appendChild(amazonRoot);\n        }\n        window.onAmazonLoginReady = () => {\n            amazon.Login.setClientId(this.clientId);\n        };\n        return new Promise((resolve, reject) => {\n            try {\n                this.loadScript('amazon-login-sdk', 'https://assets.loginwithamazon.com/sdk/na/login1.js', () => {\n                    resolve();\n                }, amazonRoot);\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n    getLoginStatus() {\n        return new Promise((resolve, reject) => {\n            let token = this.retrieveToken();\n            if (token) {\n                amazon.Login.retrieveProfile(token, (response) => {\n                    if (response.success) {\n                        let user = new SocialUser();\n                        user.id = response.profile.CustomerId;\n                        user.name = response.profile.Name;\n                        user.email = response.profile.PrimaryEmail;\n                        user.response = response.profile;\n                        resolve(user);\n                    }\n                    else {\n                        reject(response.error);\n                    }\n                });\n            }\n            else {\n                reject(`No user is currently logged in with ${AmazonLoginProvider.PROVIDER_ID}`);\n            }\n        });\n    }\n    signIn(signInOptions) {\n        const options = { ...this.initOptions, ...signInOptions };\n        return new Promise((resolve, reject) => {\n            amazon.Login.authorize(options, (authResponse) => {\n                if (authResponse.error) {\n                    reject(authResponse.error);\n                }\n                else {\n                    amazon.Login.retrieveProfile(authResponse.access_token, (response) => {\n                        let user = new SocialUser();\n                        user.id = response.profile.CustomerId;\n                        user.name = response.profile.Name;\n                        user.email = response.profile.PrimaryEmail;\n                        user.authToken = authResponse.access_token;\n                        user.response = response.profile;\n                        this.persistToken(authResponse.access_token);\n                        resolve(user);\n                    });\n                }\n            });\n        });\n    }\n    signOut() {\n        return new Promise((resolve, reject) => {\n            try {\n                amazon.Login.logout();\n                this.clearToken();\n                resolve();\n            }\n            catch (err) {\n                reject(err.message);\n            }\n        });\n    }\n    persistToken(token) {\n        localStorage.setItem(`${AmazonLoginProvider.PROVIDER_ID}_token`, token);\n    }\n    retrieveToken() {\n        return localStorage.getItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\n    }\n    clearToken() {\n        localStorage.removeItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\n    }\n}\n\nconst permissionTypes = {\n    notify: 1,\n    friends: 2,\n    photos: 4,\n    audio: 8,\n    video: 16,\n    offers: 32,\n    questions: 64,\n    pages: 128,\n    links: 256,\n    status: 1024,\n    notes: 2048,\n    messages: 4096,\n    wall: 8192,\n    ads: 32768,\n    offline: 65536,\n    docs: 131072,\n    groups: 262144,\n    notifications: 524288,\n    stats: 1048576,\n    email: 4194304,\n    market: 134217728\n};\nclass VKLoginProvider extends BaseLoginProvider {\n    constructor(clientId, initOptions = {\n        fields: 'photo_max,contacts',\n        version: '5.131',\n    }) {\n        super();\n        this.clientId = clientId;\n        this.initOptions = initOptions;\n        this.VK_API_URL = '//vk.com/js/api/openapi.js';\n        this.VK_API_GET_USER = 'users.get';\n    }\n    static { this.PROVIDER_ID = 'VK'; }\n    initialize() {\n        return new Promise((resolve, reject) => {\n            try {\n                this.loadScript(VKLoginProvider.PROVIDER_ID, this.VK_API_URL, () => {\n                    VK.init({\n                        apiId: this.clientId,\n                    });\n                    resolve();\n                });\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n    getLoginStatus() {\n        return new Promise((resolve) => this.getLoginStatusInternal(resolve));\n    }\n    signIn(permissions) {\n        if (permissions?.includes('offers')) {\n            console.warn('The \"offers\" permission is outdated.');\n        }\n        if (permissions?.includes('questions')) {\n            console.warn('The \"questions\" permission is outdated.');\n        }\n        if (permissions?.includes('messages')) {\n            console.warn('The \"messages\" permission is unavailable for non-standalone applications.');\n        }\n        const scope = permissions?.reduce((accumulator, current) => {\n            const index = Object.keys(permissionTypes).findIndex(pt => pt === current);\n            return index > -1 ? accumulator + permissionTypes[current] : 0;\n        }, 0);\n        return new Promise((resolve) => this.signInInternal(resolve, scope));\n    }\n    signOut() {\n        return new Promise((resolve) => {\n            VK.Auth.logout(() => {\n                resolve();\n            });\n        });\n    }\n    signInInternal(resolve, scope) {\n        VK.Auth.login((loginResponse) => {\n            if (loginResponse.status === 'connected') {\n                this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n            }\n        }, scope);\n    }\n    getUser(userId, token, resolve) {\n        VK.Api.call(this.VK_API_GET_USER, {\n            user_id: userId,\n            fields: this.initOptions.fields,\n            v: this.initOptions.version,\n        }, (userResponse) => {\n            resolve(this.createUser(Object.assign({}, { token }, userResponse.response[0])));\n        });\n    }\n    getLoginStatusInternal(resolve) {\n        VK.Auth.getLoginStatus((loginResponse) => {\n            if (loginResponse.status === 'connected') {\n                this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n            }\n        });\n    }\n    createUser(response) {\n        const user = new SocialUser();\n        user.id = response.id;\n        user.name = `${response.first_name} ${response.last_name}`;\n        user.photoUrl = response.photo_max;\n        user.authToken = response.token;\n        return user;\n    }\n}\n\n/**\n * Protocol modes supported by MSAL.\n */\nvar ProtocolMode;\n(function (ProtocolMode) {\n    ProtocolMode[\"AAD\"] = \"AAD\";\n    ProtocolMode[\"OIDC\"] = \"OIDC\";\n})(ProtocolMode || (ProtocolMode = {}));\nconst COMMON_AUTHORITY = 'https://login.microsoftonline.com/common/';\n/**\n * Microsoft Authentication using MSAL v2: https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-browser\n */\nclass MicrosoftLoginProvider extends BaseLoginProvider {\n    static { this.PROVIDER_ID = 'MICROSOFT'; }\n    constructor(clientId, initOptions) {\n        super();\n        this.clientId = clientId;\n        this.initOptions = {\n            authority: COMMON_AUTHORITY,\n            scopes: ['openid', 'email', 'profile', 'User.Read'],\n            knownAuthorities: [],\n            protocolMode: ProtocolMode.AAD,\n            clientCapabilities: [],\n            cacheLocation: 'sessionStorage'\n        };\n        this.initOptions = {\n            ...this.initOptions,\n            ...initOptions\n        };\n    }\n    initialize() {\n        return new Promise((resolve, reject) => {\n            this.loadScript(MicrosoftLoginProvider.PROVIDER_ID, 'https://alcdn.msauth.net/browser/2.13.1/js/msal-browser.min.js', () => {\n                try {\n                    const config = {\n                        auth: {\n                            clientId: this.clientId,\n                            redirectUri: this.initOptions.redirect_uri ?? location.origin,\n                            authority: this.initOptions.authority,\n                            knownAuthorities: this.initOptions.knownAuthorities,\n                            protocolMode: this.initOptions.protocolMode,\n                            clientCapabilities: this.initOptions.clientCapabilities\n                        },\n                        cache: !this.initOptions.cacheLocation ? null : {\n                            cacheLocation: this.initOptions.cacheLocation\n                        }\n                    };\n                    this._instance = new msal.PublicClientApplication(config);\n                    resolve();\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    getSocialUser(loginResponse) {\n        return new Promise((resolve, reject) => {\n            //After login, use Microsoft Graph API to get user info\n            let meRequest = new XMLHttpRequest();\n            meRequest.onreadystatechange = () => {\n                if (meRequest.readyState == 4) {\n                    try {\n                        if (meRequest.status == 200) {\n                            let userInfo = JSON.parse(meRequest.responseText);\n                            let user = new SocialUser();\n                            user.provider = MicrosoftLoginProvider.PROVIDER_ID;\n                            user.id = loginResponse.idToken;\n                            user.authToken = loginResponse.accessToken;\n                            user.name = loginResponse.idTokenClaims.name;\n                            user.email = loginResponse.account.username;\n                            user.idToken = loginResponse.idToken;\n                            user.response = loginResponse;\n                            user.firstName = userInfo.givenName;\n                            user.lastName = userInfo.surname;\n                            resolve(user);\n                        }\n                        else {\n                            reject(`Error retrieving user info: ${meRequest.status}`);\n                        }\n                    }\n                    catch (err) {\n                        reject(err);\n                    }\n                }\n            };\n            //Microsoft Graph ME Endpoint: https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&tabs=http\n            meRequest.open('GET', 'https://graph.microsoft.com/v1.0/me');\n            meRequest.setRequestHeader('Authorization', `Bearer ${loginResponse.accessToken}`);\n            try {\n                meRequest.send();\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n    async getLoginStatus() {\n        const accounts = this._instance.getAllAccounts();\n        if (accounts?.length > 0) {\n            const loginResponse = await this._instance.ssoSilent({\n                scopes: this.initOptions.scopes,\n                loginHint: accounts[0].username\n            });\n            return await this.getSocialUser(loginResponse);\n        }\n        else {\n            throw `No user is currently logged in with ${MicrosoftLoginProvider.PROVIDER_ID}`;\n        }\n    }\n    async signIn() {\n        const loginResponse = await this._instance.loginPopup({\n            scopes: this.initOptions.scopes,\n            prompt: this.initOptions.prompt,\n        });\n        return await this.getSocialUser(loginResponse);\n    }\n    async signOut(revoke) {\n        const accounts = this._instance.getAllAccounts();\n        if (accounts?.length > 0) {\n            await this._instance.logoutPopup({\n                account: accounts[0],\n                postLogoutRedirectUri: this.initOptions.logout_redirect_uri ?? this.initOptions.redirect_uri ?? location.href\n            });\n        }\n    }\n}\n\nclass GoogleSigninButtonDirective {\n    constructor(el, socialAuthService) {\n        this.type = 'icon';\n        this.size = 'medium';\n        this.text = 'signin_with';\n        this.shape = 'rectangular';\n        this.theme = 'outline';\n        this.logo_alignment = 'left';\n        this.width = '';\n        this.locale = '';\n        socialAuthService.initState.pipe(take(1)).subscribe(() => {\n            Promise.resolve(this.width).then((value) => {\n                if (value > '400' || (value < '200' && value != '')) {\n                    Promise.reject('Please note .. max-width 400 , min-width 200 ' +\n                        '(https://developers.google.com/identity/gsi/web/tools/configurator)');\n                }\n                else {\n                    google.accounts.id.renderButton(el.nativeElement, {\n                        type: this.type,\n                        size: this.size,\n                        text: this.text,\n                        width: this.width,\n                        shape: this.shape,\n                        theme: this.theme,\n                        logo_alignment: this.logo_alignment,\n                        locale: this.locale,\n                    });\n                }\n            });\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: GoogleSigninButtonDirective, deps: [{ token: i0.ElementRef }, { token: SocialAuthService }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: GoogleSigninButtonDirective, selector: \"asl-google-signin-button\", inputs: { type: \"type\", size: \"size\", text: \"text\", shape: \"shape\", theme: \"theme\", logo_alignment: \"logo_alignment\", width: \"width\", locale: \"locale\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: GoogleSigninButtonDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/directive-selector\n                    selector: 'asl-google-signin-button',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: SocialAuthService }]; }, propDecorators: { type: [{\n                type: Input\n            }], size: [{\n                type: Input\n            }], text: [{\n                type: Input\n            }], shape: [{\n                type: Input\n            }], theme: [{\n                type: Input\n            }], logo_alignment: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], locale: [{\n                type: Input\n            }] } });\n\nclass GoogleSigninButtonModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: GoogleSigninButtonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0\", ngImport: i0, type: GoogleSigninButtonModule, declarations: [GoogleSigninButtonDirective], exports: [GoogleSigninButtonDirective] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: GoogleSigninButtonModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: GoogleSigninButtonModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [GoogleSigninButtonDirective],\n                    exports: [GoogleSigninButtonDirective],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AmazonLoginProvider, BaseLoginProvider, DummyLoginProvider, FacebookLoginProvider, GoogleLoginProvider, GoogleSigninButtonDirective, GoogleSigninButtonModule, MicrosoftLoginProvider, SocialAuthService, SocialLoginModule, SocialUser, VKLoginProvider };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}