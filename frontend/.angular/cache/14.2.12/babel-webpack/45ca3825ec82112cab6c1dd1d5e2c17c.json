{"ast":null,"code":"import { ElementRef, EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport let ClickOutsideDirective = /*#__PURE__*/(() => {\n  class ClickOutsideDirective {\n    constructor(elementRef) {\n      this.elementRef = elementRef;\n      this.clickOutside = new EventEmitter();\n    }\n\n    onClick(target) {\n      const clickedInside = this.elementRef.nativeElement.contains(target);\n\n      if (!clickedInside && this.myValue) {\n        console.log(this.myValue);\n        this.clickOutside.emit();\n      }\n    }\n\n  }\n\n  ClickOutsideDirective.ɵfac = function ClickOutsideDirective_Factory(t) {\n    return new (t || ClickOutsideDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  ClickOutsideDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: ClickOutsideDirective,\n    selectors: [[\"\", \"clickOutside\", \"\"]],\n    hostBindings: function ClickOutsideDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function ClickOutsideDirective_click_HostBindingHandler($event) {\n          return ctx.onClick($event.target);\n        }, false, i0.ɵɵresolveDocument);\n      }\n    },\n    inputs: {\n      myValue: \"myValue\"\n    },\n    outputs: {\n      clickOutside: \"clickOutside\"\n    }\n  });\n  return ClickOutsideDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}