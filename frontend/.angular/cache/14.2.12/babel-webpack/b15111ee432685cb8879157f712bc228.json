{"ast":null,"code":"import * as i1 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayRef, OverlayModule } from '@angular/cdk/overlay';\nimport { _getFocusedElementPierceShadowDom } from '@angular/cdk/platform';\nimport * as i3 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, ViewChild, InjectionToken, Injector, TemplateRef, Injectable, SkipSelf, NgModule } from '@angular/core';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Subject, defer, of } from 'rxjs';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { startWith } from 'rxjs/operators';\n/** Configuration for opening a modal dialog. */\n\nfunction CdkDialogContainer_ng_template_0_Template(rf, ctx) {}\n\nclass DialogConfig {\n  constructor() {\n    /** The ARIA role of the dialog element. */\n    this.role = 'dialog';\n    /** Optional CSS class or classes applied to the overlay panel. */\n\n    this.panelClass = '';\n    /** Whether the dialog has a backdrop. */\n\n    this.hasBackdrop = true;\n    /** Optional CSS class or classes applied to the overlay backdrop. */\n\n    this.backdropClass = '';\n    /** Whether the dialog closes with the escape key or pointer events outside the panel element. */\n\n    this.disableClose = false;\n    /** Width of the dialog. */\n\n    this.width = '';\n    /** Height of the dialog. */\n\n    this.height = '';\n    /** Data being injected into the child component. */\n\n    this.data = null;\n    /** ID of the element that describes the dialog. */\n\n    this.ariaDescribedBy = null;\n    /** ID of the element that labels the dialog. */\n\n    this.ariaLabelledBy = null;\n    /** Dialog label applied via `aria-label` */\n\n    this.ariaLabel = null;\n    /** Whether this is a modal dialog. Used to set the `aria-modal` attribute. */\n\n    this.ariaModal = true;\n    /**\n     * Where the dialog should focus on open.\n     * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n     * AutoFocusTarget instead.\n     */\n\n    this.autoFocus = 'first-tabbable';\n    /**\n     * Whether the dialog should restore focus to the previously-focused element upon closing.\n     * Has the following behavior based on the type that is passed in:\n     * - `boolean` - when true, will return focus to the element that was focused before the dialog\n     *    was opened, otherwise won't restore focus at all.\n     * - `string` - focus will be restored to the first element that matches the CSS selector.\n     * - `HTMLElement` - focus will be restored to the specific element.\n     */\n\n    this.restoreFocus = true;\n    /**\n     * Whether the dialog should close when the user navigates backwards or forwards through browser\n     * history. This does not apply to navigation via anchor element unless using URL-hash based\n     * routing (`HashLocationStrategy` in the Angular router).\n     */\n\n    this.closeOnNavigation = true;\n    /**\n     * Whether the dialog should close when the dialog service is destroyed. This is useful if\n     * another service is wrapping the dialog and is managing the destruction instead.\n     */\n\n    this.closeOnDestroy = true;\n    /**\n     * Whether the dialog should close when the underlying overlay is detached. This is useful if\n     * another service is wrapping the dialog and is managing the destruction instead. E.g. an\n     * external detachment can happen as a result of a scroll strategy triggering it or when the\n     * browser location changes.\n     */\n\n    this.closeOnOverlayDetachments = true;\n  }\n\n}\n\nfunction throwDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * @docs-private\n */\n\n\nclass CdkDialogContainer extends BasePortalOutlet {\n  constructor(_elementRef, _focusTrapFactory, _document, _config, _interactivityChecker, _ngZone, _overlayRef, _focusMonitor) {\n    super();\n    this._elementRef = _elementRef;\n    this._focusTrapFactory = _focusTrapFactory;\n    this._config = _config;\n    this._interactivityChecker = _interactivityChecker;\n    this._ngZone = _ngZone;\n    this._overlayRef = _overlayRef;\n    this._focusMonitor = _focusMonitor;\n    /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n\n    this._elementFocusedBeforeDialogWasOpened = null;\n    /**\n     * Type of interaction that led to the dialog being closed. This is used to determine\n     * whether the focus style will be applied when returning focus to its original location\n     * after the dialog is closed.\n     */\n\n    this._closeInteractionType = null;\n    /**\n     * Queue of the IDs of the dialog's label element, based on their definition order. The first\n     * ID will be used as the `aria-labelledby` value. We use a queue here to handle the case\n     * where there are two or more titles in the DOM at a time and the first one is destroyed while\n     * the rest are present.\n     */\n\n    this._ariaLabelledByQueue = [];\n    /**\n     * Attaches a DOM portal to the dialog container.\n     * @param portal Portal to be attached.\n     * @deprecated To be turned into a method.\n     * @breaking-change 10.0.0\n     */\n\n    this.attachDomPortal = portal => {\n      if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throwDialogContentAlreadyAttachedError();\n      }\n\n      const result = this._portalOutlet.attachDomPortal(portal);\n\n      this._contentAttached();\n\n      return result;\n    };\n\n    this._document = _document;\n\n    if (this._config.ariaLabelledBy) {\n      this._ariaLabelledByQueue.push(this._config.ariaLabelledBy);\n    }\n  }\n\n  _contentAttached() {\n    this._initializeFocusTrap();\n\n    this._handleBackdropClicks();\n\n    this._captureInitialFocus();\n  }\n  /**\n   * Can be used by child classes to customize the initial focus\n   * capturing behavior (e.g. if it's tied to an animation).\n   */\n\n\n  _captureInitialFocus() {\n    this._trapFocus();\n  }\n\n  ngOnDestroy() {\n    this._restoreFocus();\n  }\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n\n\n  attachComponentPortal(portal) {\n    if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwDialogContentAlreadyAttachedError();\n    }\n\n    const result = this._portalOutlet.attachComponentPortal(portal);\n\n    this._contentAttached();\n\n    return result;\n  }\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n\n\n  attachTemplatePortal(portal) {\n    if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwDialogContentAlreadyAttachedError();\n    }\n\n    const result = this._portalOutlet.attachTemplatePortal(portal);\n\n    this._contentAttached();\n\n    return result;\n  } // TODO(crisbeto): this shouldn't be exposed, but there are internal references to it.\n\n  /** Captures focus if it isn't already inside the dialog. */\n\n\n  _recaptureFocus() {\n    if (!this._containsFocus()) {\n      this._trapFocus();\n    }\n  }\n  /**\n   * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n   * attribute to forcefully focus it. The attribute is removed after focus is moved.\n   * @param element The element to focus.\n   */\n\n\n  _forceFocus(element, options) {\n    if (!this._interactivityChecker.isFocusable(element)) {\n      element.tabIndex = -1; // The tabindex attribute should be removed to avoid navigating to that element again\n\n      this._ngZone.runOutsideAngular(() => {\n        const callback = () => {\n          element.removeEventListener('blur', callback);\n          element.removeEventListener('mousedown', callback);\n          element.removeAttribute('tabindex');\n        };\n\n        element.addEventListener('blur', callback);\n        element.addEventListener('mousedown', callback);\n      });\n    }\n\n    element.focus(options);\n  }\n  /**\n   * Focuses the first element that matches the given selector within the focus trap.\n   * @param selector The CSS selector for the element to set focus to.\n   */\n\n\n  _focusByCssSelector(selector, options) {\n    let elementToFocus = this._elementRef.nativeElement.querySelector(selector);\n\n    if (elementToFocus) {\n      this._forceFocus(elementToFocus, options);\n    }\n  }\n  /**\n   * Moves the focus inside the focus trap. When autoFocus is not set to 'dialog', if focus\n   * cannot be moved then focus will go to the dialog container.\n   */\n\n\n  _trapFocus() {\n    const element = this._elementRef.nativeElement; // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty when setting focus when autoFocus isn't set to\n    // dialog. If the element inside the dialog can't be focused, then the container is focused\n    // so the user can't tab into other elements behind it.\n\n    switch (this._config.autoFocus) {\n      case false:\n      case 'dialog':\n        // Ensure that focus is on the dialog container. It's possible that a different\n        // component tried to move focus while the open animation was running. See:\n        // https://github.com/angular/components/issues/16215. Note that we only want to do this\n        // if the focus isn't inside the dialog already, because it's possible that the consumer\n        // turned off `autoFocus` in order to move focus themselves.\n        if (!this._containsFocus()) {\n          element.focus();\n        }\n\n        break;\n\n      case true:\n      case 'first-tabbable':\n        this._focusTrap.focusInitialElementWhenReady().then(focusedSuccessfully => {\n          // If we weren't able to find a focusable element in the dialog, then focus the dialog\n          // container instead.\n          if (!focusedSuccessfully) {\n            this._focusDialogContainer();\n          }\n        });\n\n        break;\n\n      case 'first-heading':\n        this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n\n        break;\n\n      default:\n        this._focusByCssSelector(this._config.autoFocus);\n\n        break;\n    }\n  }\n  /** Restores focus to the element that was focused before the dialog opened. */\n\n\n  _restoreFocus() {\n    const focusConfig = this._config.restoreFocus;\n    let focusTargetElement = null;\n\n    if (typeof focusConfig === 'string') {\n      focusTargetElement = this._document.querySelector(focusConfig);\n    } else if (typeof focusConfig === 'boolean') {\n      focusTargetElement = focusConfig ? this._elementFocusedBeforeDialogWasOpened : null;\n    } else if (focusConfig) {\n      focusTargetElement = focusConfig;\n    } // We need the extra check, because IE can set the `activeElement` to null in some cases.\n\n\n    if (this._config.restoreFocus && focusTargetElement && typeof focusTargetElement.focus === 'function') {\n      const activeElement = _getFocusedElementPierceShadowDom();\n\n      const element = this._elementRef.nativeElement; // Make sure that focus is still inside the dialog or is on the body (usually because a\n      // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n      // the consumer moved it themselves before the animation was done, in which case we shouldn't\n      // do anything.\n\n      if (!activeElement || activeElement === this._document.body || activeElement === element || element.contains(activeElement)) {\n        if (this._focusMonitor) {\n          this._focusMonitor.focusVia(focusTargetElement, this._closeInteractionType);\n\n          this._closeInteractionType = null;\n        } else {\n          focusTargetElement.focus();\n        }\n      }\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n  /** Focuses the dialog container. */\n\n\n  _focusDialogContainer() {\n    // Note that there is no focus method when rendering on the server.\n    if (this._elementRef.nativeElement.focus) {\n      this._elementRef.nativeElement.focus();\n    }\n  }\n  /** Returns whether focus is inside the dialog. */\n\n\n  _containsFocus() {\n    const element = this._elementRef.nativeElement;\n\n    const activeElement = _getFocusedElementPierceShadowDom();\n\n    return element === activeElement || element.contains(activeElement);\n  }\n  /** Sets up the focus trap. */\n\n\n  _initializeFocusTrap() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement); // Save the previously focused element. This element will be re-focused\n    // when the dialog closes.\n\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = _getFocusedElementPierceShadowDom();\n    }\n  }\n  /** Sets up the listener that handles clicks on the dialog backdrop. */\n\n\n  _handleBackdropClicks() {\n    // Clicking on the backdrop will move focus out of dialog.\n    // Recapture it if closing via the backdrop is disabled.\n    this._overlayRef.backdropClick().subscribe(() => {\n      if (this._config.disableClose) {\n        this._recaptureFocus();\n      }\n    });\n  }\n\n  static #_ = this.ɵfac = function CdkDialogContainer_Factory(t) {\n    return new (t || CdkDialogContainer)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.FocusTrapFactory), i0.ɵɵdirectiveInject(DOCUMENT, 8), i0.ɵɵdirectiveInject(DialogConfig), i0.ɵɵdirectiveInject(i1.InteractivityChecker), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1$1.OverlayRef), i0.ɵɵdirectiveInject(i1.FocusMonitor));\n  };\n  static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: CdkDialogContainer,\n    selectors: [[\"cdk-dialog-container\"]],\n    viewQuery: function CdkDialogContainer_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(CdkPortalOutlet, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n      }\n    },\n    hostAttrs: [\"tabindex\", \"-1\", 1, \"cdk-dialog-container\"],\n    hostVars: 6,\n    hostBindings: function CdkDialogContainer_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"id\", ctx._config.id || null)(\"role\", ctx._config.role)(\"aria-modal\", ctx._config.ariaModal)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledByQueue[0])(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkPortalOutlet\", \"\"]],\n    template: function CdkDialogContainer_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, CdkDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n      }\n    },\n    dependencies: [i3.CdkPortalOutlet],\n    styles: [\".cdk-dialog-container{display:block;width:100%;height:100%;min-height:inherit;max-height:inherit}\"],\n    encapsulation: 2\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkDialogContainer, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-dialog-container',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.Default,\n      host: {\n        'class': 'cdk-dialog-container',\n        'tabindex': '-1',\n        '[attr.id]': '_config.id || null',\n        '[attr.role]': '_config.role',\n        '[attr.aria-modal]': '_config.ariaModal',\n        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledByQueue[0]',\n        '[attr.aria-label]': '_config.ariaLabel',\n        '[attr.aria-describedby]': '_config.ariaDescribedBy || null'\n      },\n      template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n      styles: [\".cdk-dialog-container{display:block;width:100%;height:100%;min-height:inherit;max-height:inherit}\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.FocusTrapFactory\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DialogConfig]\n      }]\n    }, {\n      type: i1.InteractivityChecker\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i1$1.OverlayRef\n    }, {\n      type: i1.FocusMonitor\n    }];\n  }, {\n    _portalOutlet: [{\n      type: ViewChild,\n      args: [CdkPortalOutlet, {\n        static: true\n      }]\n    }]\n  });\n})();\n/**\n * Reference to a dialog opened via the Dialog service.\n */\n\n\nclass DialogRef {\n  constructor(overlayRef, config) {\n    this.overlayRef = overlayRef;\n    this.config = config;\n    /** Emits when the dialog has been closed. */\n\n    this.closed = new Subject();\n    this.disableClose = config.disableClose;\n    this.backdropClick = overlayRef.backdropClick();\n    this.keydownEvents = overlayRef.keydownEvents();\n    this.outsidePointerEvents = overlayRef.outsidePointerEvents();\n    this.id = config.id; // By the time the dialog is created we are guaranteed to have an ID.\n\n    this.keydownEvents.subscribe(event => {\n      if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n        event.preventDefault();\n        this.close(undefined, {\n          focusOrigin: 'keyboard'\n        });\n      }\n    });\n    this.backdropClick.subscribe(() => {\n      if (!this.disableClose) {\n        this.close(undefined, {\n          focusOrigin: 'mouse'\n        });\n      }\n    });\n    this._detachSubscription = overlayRef.detachments().subscribe(() => {\n      // Check specifically for `false`, because we want `undefined` to be treated like `true`.\n      if (config.closeOnOverlayDetachments !== false) {\n        this.close();\n      }\n    });\n  }\n  /**\n   * Close the dialog.\n   * @param result Optional result to return to the dialog opener.\n   * @param options Additional options to customize the closing behavior.\n   */\n\n\n  close(result, options) {\n    if (this.containerInstance) {\n      const closedSubject = this.closed;\n      this.containerInstance._closeInteractionType = options?.focusOrigin || 'program'; // Drop the detach subscription first since it can be triggered by the\n      // `dispose` call and override the result of this closing sequence.\n\n      this._detachSubscription.unsubscribe();\n\n      this.overlayRef.dispose();\n      closedSubject.next(result);\n      closedSubject.complete();\n      this.componentInstance = this.containerInstance = null;\n    }\n  }\n  /** Updates the position of the dialog based on the current position strategy. */\n\n\n  updatePosition() {\n    this.overlayRef.updatePosition();\n    return this;\n  }\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n\n\n  updateSize(width = '', height = '') {\n    this.overlayRef.updateSize({\n      width,\n      height\n    });\n    return this;\n  }\n  /** Add a CSS class or an array of classes to the overlay pane. */\n\n\n  addPanelClass(classes) {\n    this.overlayRef.addPanelClass(classes);\n    return this;\n  }\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n\n\n  removePanelClass(classes) {\n    this.overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n}\n/** Injection token for the Dialog's ScrollStrategy. */\n\n\nconst DIALOG_SCROLL_STRATEGY = new InjectionToken('DialogScrollStrategy');\n/** Injection token for the Dialog's Data. */\n\nconst DIALOG_DATA = new InjectionToken('DialogData');\n/** Injection token that can be used to provide default options for the dialog module. */\n\nconst DEFAULT_DIALOG_CONFIG = new InjectionToken('DefaultDialogConfig');\n/** @docs-private */\n\nfunction DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\n\n\nconst DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/** Unique id for the created dialog. */\n\nlet uniqueId = 0;\n\nclass Dialog {\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs() {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n  /** Stream that emits when a dialog has been opened. */\n\n\n  get afterOpened() {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  constructor(_overlay, _injector, _defaultOptions, _parentDialog, _overlayContainer, scrollStrategy) {\n    this._overlay = _overlay;\n    this._injector = _injector;\n    this._defaultOptions = _defaultOptions;\n    this._parentDialog = _parentDialog;\n    this._overlayContainer = _overlayContainer;\n    this._openDialogsAtThisLevel = [];\n    this._afterAllClosedAtThisLevel = new Subject();\n    this._afterOpenedAtThisLevel = new Subject();\n    this._ariaHiddenElements = new Map();\n    /**\n     * Stream that emits when all open dialog have finished closing.\n     * Will emit on subscribe if there are no open dialogs to begin with.\n     */\n\n    this.afterAllClosed = defer(() => this.openDialogs.length ? this._getAfterAllClosed() : this._getAfterAllClosed().pipe(startWith(undefined)));\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  open(componentOrTemplateRef, config) {\n    const defaults = this._defaultOptions || new DialogConfig();\n    config = { ...defaults,\n      ...config\n    };\n    config.id = config.id || `cdk-dialog-${uniqueId++}`;\n\n    if (config.id && this.getDialogById(config.id) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayConfig = this._getOverlayConfig(config);\n\n    const overlayRef = this._overlay.create(overlayConfig);\n\n    const dialogRef = new DialogRef(overlayRef, config);\n\n    const dialogContainer = this._attachContainer(overlayRef, dialogRef, config);\n\n    dialogRef.containerInstance = dialogContainer;\n\n    this._attachDialogContent(componentOrTemplateRef, dialogRef, dialogContainer, config); // If this is the first dialog that we're opening, hide all the non-overlay content.\n\n\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.closed.subscribe(() => this._removeOpenDialog(dialogRef, true));\n    this.afterOpened.next(dialogRef);\n    return dialogRef;\n  }\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n\n\n  closeAll() {\n    reverseForEach(this.openDialogs, dialog => dialog.close());\n  }\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n\n\n  getDialogById(id) {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Make one pass over all the dialogs that need to be untracked, but should not be closed. We\n    // want to stop tracking the open dialog even if it hasn't been closed, because the tracking\n    // determines when `aria-hidden` is removed from elements outside the dialog.\n    reverseForEach(this._openDialogsAtThisLevel, dialog => {\n      // Check for `false` specifically since we want `undefined` to be interpreted as `true`.\n      if (dialog.config.closeOnDestroy === false) {\n        this._removeOpenDialog(dialog, false);\n      }\n    }); // Make a second pass and close the remaining dialogs. We do this second pass in order to\n    // correctly dispatch the `afterAllClosed` event in case we have a mixed array of dialogs\n    // that should be closed and dialogs that should not.\n\n    reverseForEach(this._openDialogsAtThisLevel, dialog => dialog.close());\n\n    this._afterAllClosedAtThisLevel.complete();\n\n    this._afterOpenedAtThisLevel.complete();\n\n    this._openDialogsAtThisLevel = [];\n  }\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param config The dialog configuration.\n   * @returns The overlay configuration.\n   */\n\n\n  _getOverlayConfig(config) {\n    const state = new OverlayConfig({\n      positionStrategy: config.positionStrategy || this._overlay.position().global().centerHorizontally().centerVertically(),\n      scrollStrategy: config.scrollStrategy || this._scrollStrategy(),\n      panelClass: config.panelClass,\n      hasBackdrop: config.hasBackdrop,\n      direction: config.direction,\n      minWidth: config.minWidth,\n      minHeight: config.minHeight,\n      maxWidth: config.maxWidth,\n      maxHeight: config.maxHeight,\n      width: config.width,\n      height: config.height,\n      disposeOnNavigation: config.closeOnNavigation\n    });\n\n    if (config.backdropClass) {\n      state.backdropClass = config.backdropClass;\n    }\n\n    return state;\n  }\n  /**\n   * Attaches a dialog container to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n\n\n  _attachContainer(overlay, dialogRef, config) {\n    const userInjector = config.injector || config.viewContainerRef?.injector;\n    const providers = [{\n      provide: DialogConfig,\n      useValue: config\n    }, {\n      provide: DialogRef,\n      useValue: dialogRef\n    }, {\n      provide: OverlayRef,\n      useValue: overlay\n    }];\n    let containerType;\n\n    if (config.container) {\n      if (typeof config.container === 'function') {\n        containerType = config.container;\n      } else {\n        containerType = config.container.type;\n        providers.push(...config.container.providers(config));\n      }\n    } else {\n      containerType = CdkDialogContainer;\n    }\n\n    const containerPortal = new ComponentPortal(containerType, config.viewContainerRef, Injector.create({\n      parent: userInjector || this._injector,\n      providers\n    }), config.componentFactoryResolver);\n    const containerRef = overlay.attach(containerPortal);\n    return containerRef.instance;\n  }\n  /**\n   * Attaches the user-provided component to the already-created dialog container.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogRef Reference to the dialog being opened.\n   * @param dialogContainer Component that is going to wrap the dialog content.\n   * @param config Configuration used to open the dialog.\n   */\n\n\n  _attachDialogContent(componentOrTemplateRef, dialogRef, dialogContainer, config) {\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      const injector = this._createInjector(config, dialogRef, dialogContainer, undefined);\n\n      let context = {\n        $implicit: config.data,\n        dialogRef\n      };\n\n      if (config.templateContext) {\n        context = { ...context,\n          ...(typeof config.templateContext === 'function' ? config.templateContext() : config.templateContext)\n        };\n      }\n\n      dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, context, injector));\n    } else {\n      const injector = this._createInjector(config, dialogRef, dialogContainer, this._injector);\n\n      const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector, config.componentFactoryResolver));\n      dialogRef.componentRef = contentRef;\n      dialogRef.componentInstance = contentRef.instance;\n    }\n  }\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog being opened.\n   * @param dialogContainer Component that is going to wrap the dialog content.\n   * @param fallbackInjector Injector to use as a fallback when a lookup fails in the custom\n   * dialog injector, if the user didn't provide a custom one.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n\n\n  _createInjector(config, dialogRef, dialogContainer, fallbackInjector) {\n    const userInjector = config.injector || config.viewContainerRef?.injector;\n    const providers = [{\n      provide: DIALOG_DATA,\n      useValue: config.data\n    }, {\n      provide: DialogRef,\n      useValue: dialogRef\n    }];\n\n    if (config.providers) {\n      if (typeof config.providers === 'function') {\n        providers.push(...config.providers(dialogRef, config, dialogContainer));\n      } else {\n        providers.push(...config.providers);\n      }\n    }\n\n    if (config.direction && (!userInjector || !userInjector.get(Directionality, null, {\n      optional: true\n    }))) {\n      providers.push({\n        provide: Directionality,\n        useValue: {\n          value: config.direction,\n          change: of()\n        }\n      });\n    }\n\n    return Injector.create({\n      parent: userInjector || fallbackInjector,\n      providers\n    });\n  }\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   * @param emitEvent Whether to emit an event if this is the last dialog.\n   */\n\n\n  _removeOpenDialog(dialogRef, emitEvent) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1); // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n\n        if (emitEvent) {\n          this._getAfterAllClosed().next();\n        }\n      }\n    }\n  }\n  /** Hides all of the content that isn't an overlay from assistive technology. */\n\n\n  _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement(); // Ensure that the overlay container is attached to the DOM.\n\n\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        const sibling = siblings[i];\n\n        if (sibling !== overlayContainer && sibling.nodeName !== 'SCRIPT' && sibling.nodeName !== 'STYLE' && !sibling.hasAttribute('aria-live')) {\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  _getAfterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n  }\n\n  static #_ = this.ɵfac = function Dialog_Factory(t) {\n    return new (t || Dialog)(i0.ɵɵinject(i1$1.Overlay), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(DEFAULT_DIALOG_CONFIG, 8), i0.ɵɵinject(Dialog, 12), i0.ɵɵinject(i1$1.OverlayContainer), i0.ɵɵinject(DIALOG_SCROLL_STRATEGY));\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Dialog,\n    factory: Dialog.ɵfac\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Dialog, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1$1.Overlay\n    }, {\n      type: i0.Injector\n    }, {\n      type: DialogConfig,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DEFAULT_DIALOG_CONFIG]\n      }]\n    }, {\n      type: Dialog,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: i1$1.OverlayContainer\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DIALOG_SCROLL_STRATEGY]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Executes a callback against all elements in an array while iterating in reverse.\n * Useful if the array is being modified as it is being iterated.\n */\n\n\nfunction reverseForEach(items, callback) {\n  let i = items.length;\n\n  while (i--) {\n    callback(items[i]);\n  }\n}\n\nclass DialogModule {\n  static #_ = this.ɵfac = function DialogModule_Factory(t) {\n    return new (t || DialogModule)();\n  };\n  static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: DialogModule\n  });\n  static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [Dialog, DIALOG_SCROLL_STRATEGY_PROVIDER],\n    imports: [OverlayModule, PortalModule, A11yModule, // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n    // don't have to remember to import it or be faced with an unhelpful error.\n    PortalModule]\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DialogModule, [{\n    type: NgModule,\n    args: [{\n      imports: [OverlayModule, PortalModule, A11yModule],\n      exports: [// Re-export the PortalModule so that people extending the `CdkDialogContainer`\n      // don't have to remember to import it or be faced with an unhelpful error.\n      PortalModule, CdkDialogContainer],\n      declarations: [CdkDialogContainer],\n      providers: [Dialog, DIALOG_SCROLL_STRATEGY_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CdkDialogContainer, DEFAULT_DIALOG_CONFIG, DIALOG_DATA, DIALOG_SCROLL_STRATEGY, DIALOG_SCROLL_STRATEGY_PROVIDER, DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, Dialog, DialogConfig, DialogModule, DialogRef, throwDialogContentAlreadyAttachedError };","map":{"version":3,"names":["i1","A11yModule","i1$1","Overlay","OverlayConfig","OverlayRef","OverlayModule","_getFocusedElementPierceShadowDom","i3","BasePortalOutlet","CdkPortalOutlet","ComponentPortal","TemplatePortal","PortalModule","DOCUMENT","i0","Component","ViewEncapsulation","ChangeDetectionStrategy","Optional","Inject","ViewChild","InjectionToken","Injector","TemplateRef","Injectable","SkipSelf","NgModule","ESCAPE","hasModifierKey","Subject","defer","of","Directionality","startWith","DialogConfig","constructor","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","data","ariaDescribedBy","ariaLabelledBy","ariaLabel","ariaModal","autoFocus","restoreFocus","closeOnNavigation","closeOnDestroy","closeOnOverlayDetachments","throwDialogContentAlreadyAttachedError","Error","CdkDialogContainer","_elementRef","_focusTrapFactory","_document","_config","_interactivityChecker","_ngZone","_overlayRef","_focusMonitor","_elementFocusedBeforeDialogWasOpened","_closeInteractionType","_ariaLabelledByQueue","attachDomPortal","portal","_portalOutlet","hasAttached","ngDevMode","result","_contentAttached","push","_initializeFocusTrap","_handleBackdropClicks","_captureInitialFocus","_trapFocus","ngOnDestroy","_restoreFocus","attachComponentPortal","attachTemplatePortal","_recaptureFocus","_containsFocus","_forceFocus","element","options","isFocusable","tabIndex","runOutsideAngular","callback","removeEventListener","removeAttribute","addEventListener","focus","_focusByCssSelector","selector","elementToFocus","nativeElement","querySelector","_focusTrap","focusInitialElementWhenReady","then","focusedSuccessfully","_focusDialogContainer","focusConfig","focusTargetElement","activeElement","body","contains","focusVia","destroy","create","backdropClick","subscribe","ɵfac","ElementRef","FocusTrapFactory","InteractivityChecker","NgZone","FocusMonitor","ɵcmp","type","args","encapsulation","None","changeDetection","Default","host","template","styles","undefined","decorators","static","DialogRef","overlayRef","config","closed","keydownEvents","outsidePointerEvents","id","event","keyCode","preventDefault","close","focusOrigin","_detachSubscription","detachments","containerInstance","closedSubject","unsubscribe","dispose","next","complete","componentInstance","updatePosition","updateSize","addPanelClass","classes","removePanelClass","DIALOG_SCROLL_STRATEGY","DIALOG_DATA","DEFAULT_DIALOG_CONFIG","DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","block","DIALOG_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","uniqueId","Dialog","openDialogs","_parentDialog","_openDialogsAtThisLevel","afterOpened","_afterOpenedAtThisLevel","_overlay","_injector","_defaultOptions","_overlayContainer","scrollStrategy","_afterAllClosedAtThisLevel","_ariaHiddenElements","Map","afterAllClosed","length","_getAfterAllClosed","pipe","_scrollStrategy","open","componentOrTemplateRef","defaults","getDialogById","overlayConfig","_getOverlayConfig","dialogRef","dialogContainer","_attachContainer","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","reverseForEach","dialog","find","state","positionStrategy","position","global","centerHorizontally","centerVertically","direction","minWidth","minHeight","maxWidth","maxHeight","disposeOnNavigation","userInjector","injector","viewContainerRef","providers","useValue","containerType","container","containerPortal","parent","componentFactoryResolver","containerRef","attach","instance","_createInjector","context","$implicit","templateContext","contentRef","componentRef","fallbackInjector","get","optional","value","change","emitEvent","index","indexOf","splice","forEach","previousValue","setAttribute","clear","overlayContainer","getContainerElement","parentElement","siblings","children","i","sibling","nodeName","hasAttribute","set","getAttribute","OverlayContainer","ɵprov","items","DialogModule","ɵmod","ɵinj","imports","exports","declarations"],"sources":["D:/git projects/DD/frontend/node_modules/@angular/cdk/fesm2022/dialog.mjs"],"sourcesContent":["import * as i1 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayRef, OverlayModule } from '@angular/cdk/overlay';\nimport { _getFocusedElementPierceShadowDom } from '@angular/cdk/platform';\nimport * as i3 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, ViewChild, InjectionToken, Injector, TemplateRef, Injectable, SkipSelf, NgModule } from '@angular/core';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Subject, defer, of } from 'rxjs';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { startWith } from 'rxjs/operators';\n\n/** Configuration for opening a modal dialog. */\nclass DialogConfig {\n    constructor() {\n        /** The ARIA role of the dialog element. */\n        this.role = 'dialog';\n        /** Optional CSS class or classes applied to the overlay panel. */\n        this.panelClass = '';\n        /** Whether the dialog has a backdrop. */\n        this.hasBackdrop = true;\n        /** Optional CSS class or classes applied to the overlay backdrop. */\n        this.backdropClass = '';\n        /** Whether the dialog closes with the escape key or pointer events outside the panel element. */\n        this.disableClose = false;\n        /** Width of the dialog. */\n        this.width = '';\n        /** Height of the dialog. */\n        this.height = '';\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** ID of the element that describes the dialog. */\n        this.ariaDescribedBy = null;\n        /** ID of the element that labels the dialog. */\n        this.ariaLabelledBy = null;\n        /** Dialog label applied via `aria-label` */\n        this.ariaLabel = null;\n        /** Whether this is a modal dialog. Used to set the `aria-modal` attribute. */\n        this.ariaModal = true;\n        /**\n         * Where the dialog should focus on open.\n         * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n         * AutoFocusTarget instead.\n         */\n        this.autoFocus = 'first-tabbable';\n        /**\n         * Whether the dialog should restore focus to the previously-focused element upon closing.\n         * Has the following behavior based on the type that is passed in:\n         * - `boolean` - when true, will return focus to the element that was focused before the dialog\n         *    was opened, otherwise won't restore focus at all.\n         * - `string` - focus will be restored to the first element that matches the CSS selector.\n         * - `HTMLElement` - focus will be restored to the specific element.\n         */\n        this.restoreFocus = true;\n        /**\n         * Whether the dialog should close when the user navigates backwards or forwards through browser\n         * history. This does not apply to navigation via anchor element unless using URL-hash based\n         * routing (`HashLocationStrategy` in the Angular router).\n         */\n        this.closeOnNavigation = true;\n        /**\n         * Whether the dialog should close when the dialog service is destroyed. This is useful if\n         * another service is wrapping the dialog and is managing the destruction instead.\n         */\n        this.closeOnDestroy = true;\n        /**\n         * Whether the dialog should close when the underlying overlay is detached. This is useful if\n         * another service is wrapping the dialog and is managing the destruction instead. E.g. an\n         * external detachment can happen as a result of a scroll strategy triggering it or when the\n         * browser location changes.\n         */\n        this.closeOnOverlayDetachments = true;\n    }\n}\n\nfunction throwDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * @docs-private\n */\nclass CdkDialogContainer extends BasePortalOutlet {\n    constructor(_elementRef, _focusTrapFactory, _document, _config, _interactivityChecker, _ngZone, _overlayRef, _focusMonitor) {\n        super();\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._config = _config;\n        this._interactivityChecker = _interactivityChecker;\n        this._ngZone = _ngZone;\n        this._overlayRef = _overlayRef;\n        this._focusMonitor = _focusMonitor;\n        /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n        this._elementFocusedBeforeDialogWasOpened = null;\n        /**\n         * Type of interaction that led to the dialog being closed. This is used to determine\n         * whether the focus style will be applied when returning focus to its original location\n         * after the dialog is closed.\n         */\n        this._closeInteractionType = null;\n        /**\n         * Queue of the IDs of the dialog's label element, based on their definition order. The first\n         * ID will be used as the `aria-labelledby` value. We use a queue here to handle the case\n         * where there are two or more titles in the DOM at a time and the first one is destroyed while\n         * the rest are present.\n         */\n        this._ariaLabelledByQueue = [];\n        /**\n         * Attaches a DOM portal to the dialog container.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwDialogContentAlreadyAttachedError();\n            }\n            const result = this._portalOutlet.attachDomPortal(portal);\n            this._contentAttached();\n            return result;\n        };\n        this._document = _document;\n        if (this._config.ariaLabelledBy) {\n            this._ariaLabelledByQueue.push(this._config.ariaLabelledBy);\n        }\n    }\n    _contentAttached() {\n        this._initializeFocusTrap();\n        this._handleBackdropClicks();\n        this._captureInitialFocus();\n    }\n    /**\n     * Can be used by child classes to customize the initial focus\n     * capturing behavior (e.g. if it's tied to an animation).\n     */\n    _captureInitialFocus() {\n        this._trapFocus();\n    }\n    ngOnDestroy() {\n        this._restoreFocus();\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachComponentPortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwDialogContentAlreadyAttachedError();\n        }\n        const result = this._portalOutlet.attachComponentPortal(portal);\n        this._contentAttached();\n        return result;\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachTemplatePortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwDialogContentAlreadyAttachedError();\n        }\n        const result = this._portalOutlet.attachTemplatePortal(portal);\n        this._contentAttached();\n        return result;\n    }\n    // TODO(crisbeto): this shouldn't be exposed, but there are internal references to it.\n    /** Captures focus if it isn't already inside the dialog. */\n    _recaptureFocus() {\n        if (!this._containsFocus()) {\n            this._trapFocus();\n        }\n    }\n    /**\n     * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n     * attribute to forcefully focus it. The attribute is removed after focus is moved.\n     * @param element The element to focus.\n     */\n    _forceFocus(element, options) {\n        if (!this._interactivityChecker.isFocusable(element)) {\n            element.tabIndex = -1;\n            // The tabindex attribute should be removed to avoid navigating to that element again\n            this._ngZone.runOutsideAngular(() => {\n                const callback = () => {\n                    element.removeEventListener('blur', callback);\n                    element.removeEventListener('mousedown', callback);\n                    element.removeAttribute('tabindex');\n                };\n                element.addEventListener('blur', callback);\n                element.addEventListener('mousedown', callback);\n            });\n        }\n        element.focus(options);\n    }\n    /**\n     * Focuses the first element that matches the given selector within the focus trap.\n     * @param selector The CSS selector for the element to set focus to.\n     */\n    _focusByCssSelector(selector, options) {\n        let elementToFocus = this._elementRef.nativeElement.querySelector(selector);\n        if (elementToFocus) {\n            this._forceFocus(elementToFocus, options);\n        }\n    }\n    /**\n     * Moves the focus inside the focus trap. When autoFocus is not set to 'dialog', if focus\n     * cannot be moved then focus will go to the dialog container.\n     */\n    _trapFocus() {\n        const element = this._elementRef.nativeElement;\n        // If were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait for the microtask queue to be empty when setting focus when autoFocus isn't set to\n        // dialog. If the element inside the dialog can't be focused, then the container is focused\n        // so the user can't tab into other elements behind it.\n        switch (this._config.autoFocus) {\n            case false:\n            case 'dialog':\n                // Ensure that focus is on the dialog container. It's possible that a different\n                // component tried to move focus while the open animation was running. See:\n                // https://github.com/angular/components/issues/16215. Note that we only want to do this\n                // if the focus isn't inside the dialog already, because it's possible that the consumer\n                // turned off `autoFocus` in order to move focus themselves.\n                if (!this._containsFocus()) {\n                    element.focus();\n                }\n                break;\n            case true:\n            case 'first-tabbable':\n                this._focusTrap.focusInitialElementWhenReady().then(focusedSuccessfully => {\n                    // If we weren't able to find a focusable element in the dialog, then focus the dialog\n                    // container instead.\n                    if (!focusedSuccessfully) {\n                        this._focusDialogContainer();\n                    }\n                });\n                break;\n            case 'first-heading':\n                this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n                break;\n            default:\n                this._focusByCssSelector(this._config.autoFocus);\n                break;\n        }\n    }\n    /** Restores focus to the element that was focused before the dialog opened. */\n    _restoreFocus() {\n        const focusConfig = this._config.restoreFocus;\n        let focusTargetElement = null;\n        if (typeof focusConfig === 'string') {\n            focusTargetElement = this._document.querySelector(focusConfig);\n        }\n        else if (typeof focusConfig === 'boolean') {\n            focusTargetElement = focusConfig ? this._elementFocusedBeforeDialogWasOpened : null;\n        }\n        else if (focusConfig) {\n            focusTargetElement = focusConfig;\n        }\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (this._config.restoreFocus &&\n            focusTargetElement &&\n            typeof focusTargetElement.focus === 'function') {\n            const activeElement = _getFocusedElementPierceShadowDom();\n            const element = this._elementRef.nativeElement;\n            // Make sure that focus is still inside the dialog or is on the body (usually because a\n            // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n            // the consumer moved it themselves before the animation was done, in which case we shouldn't\n            // do anything.\n            if (!activeElement ||\n                activeElement === this._document.body ||\n                activeElement === element ||\n                element.contains(activeElement)) {\n                if (this._focusMonitor) {\n                    this._focusMonitor.focusVia(focusTargetElement, this._closeInteractionType);\n                    this._closeInteractionType = null;\n                }\n                else {\n                    focusTargetElement.focus();\n                }\n            }\n        }\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    }\n    /** Focuses the dialog container. */\n    _focusDialogContainer() {\n        // Note that there is no focus method when rendering on the server.\n        if (this._elementRef.nativeElement.focus) {\n            this._elementRef.nativeElement.focus();\n        }\n    }\n    /** Returns whether focus is inside the dialog. */\n    _containsFocus() {\n        const element = this._elementRef.nativeElement;\n        const activeElement = _getFocusedElementPierceShadowDom();\n        return element === activeElement || element.contains(activeElement);\n    }\n    /** Sets up the focus trap. */\n    _initializeFocusTrap() {\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n        // Save the previously focused element. This element will be re-focused\n        // when the dialog closes.\n        if (this._document) {\n            this._elementFocusedBeforeDialogWasOpened = _getFocusedElementPierceShadowDom();\n        }\n    }\n    /** Sets up the listener that handles clicks on the dialog backdrop. */\n    _handleBackdropClicks() {\n        // Clicking on the backdrop will move focus out of dialog.\n        // Recapture it if closing via the backdrop is disabled.\n        this._overlayRef.backdropClick().subscribe(() => {\n            if (this._config.disableClose) {\n                this._recaptureFocus();\n            }\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDialogContainer, deps: [{ token: i0.ElementRef }, { token: i1.FocusTrapFactory }, { token: DOCUMENT, optional: true }, { token: DialogConfig }, { token: i1.InteractivityChecker }, { token: i0.NgZone }, { token: i1$1.OverlayRef }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkDialogContainer, selector: \"cdk-dialog-container\", host: { attributes: { \"tabindex\": \"-1\" }, properties: { \"attr.id\": \"_config.id || null\", \"attr.role\": \"_config.role\", \"attr.aria-modal\": \"_config.ariaModal\", \"attr.aria-labelledby\": \"_config.ariaLabel ? null : _ariaLabelledByQueue[0]\", \"attr.aria-label\": \"_config.ariaLabel\", \"attr.aria-describedby\": \"_config.ariaDescribedBy || null\" }, classAttribute: \"cdk-dialog-container\" }, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<ng-template cdkPortalOutlet></ng-template>\\n\", styles: [\".cdk-dialog-container{display:block;width:100%;height:100%;min-height:inherit;max-height:inherit}\"], dependencies: [{ kind: \"directive\", type: i3.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDialogContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-dialog-container', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, host: {\n                        'class': 'cdk-dialog-container',\n                        'tabindex': '-1',\n                        '[attr.id]': '_config.id || null',\n                        '[attr.role]': '_config.role',\n                        '[attr.aria-modal]': '_config.ariaModal',\n                        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledByQueue[0]',\n                        '[attr.aria-label]': '_config.ariaLabel',\n                        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                    }, template: \"<ng-template cdkPortalOutlet></ng-template>\\n\", styles: [\".cdk-dialog-container{display:block;width:100%;height:100%;min-height:inherit;max-height:inherit}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.FocusTrapFactory }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DialogConfig]\n                }] }, { type: i1.InteractivityChecker }, { type: i0.NgZone }, { type: i1$1.OverlayRef }, { type: i1.FocusMonitor }]; }, propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }] } });\n\n/**\n * Reference to a dialog opened via the Dialog service.\n */\nclass DialogRef {\n    constructor(overlayRef, config) {\n        this.overlayRef = overlayRef;\n        this.config = config;\n        /** Emits when the dialog has been closed. */\n        this.closed = new Subject();\n        this.disableClose = config.disableClose;\n        this.backdropClick = overlayRef.backdropClick();\n        this.keydownEvents = overlayRef.keydownEvents();\n        this.outsidePointerEvents = overlayRef.outsidePointerEvents();\n        this.id = config.id; // By the time the dialog is created we are guaranteed to have an ID.\n        this.keydownEvents.subscribe(event => {\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this.close(undefined, { focusOrigin: 'keyboard' });\n            }\n        });\n        this.backdropClick.subscribe(() => {\n            if (!this.disableClose) {\n                this.close(undefined, { focusOrigin: 'mouse' });\n            }\n        });\n        this._detachSubscription = overlayRef.detachments().subscribe(() => {\n            // Check specifically for `false`, because we want `undefined` to be treated like `true`.\n            if (config.closeOnOverlayDetachments !== false) {\n                this.close();\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param result Optional result to return to the dialog opener.\n     * @param options Additional options to customize the closing behavior.\n     */\n    close(result, options) {\n        if (this.containerInstance) {\n            const closedSubject = this.closed;\n            this.containerInstance._closeInteractionType = options?.focusOrigin || 'program';\n            // Drop the detach subscription first since it can be triggered by the\n            // `dispose` call and override the result of this closing sequence.\n            this._detachSubscription.unsubscribe();\n            this.overlayRef.dispose();\n            closedSubject.next(result);\n            closedSubject.complete();\n            this.componentInstance = this.containerInstance = null;\n        }\n    }\n    /** Updates the position of the dialog based on the current position strategy. */\n    updatePosition() {\n        this.overlayRef.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width = '', height = '') {\n        this.overlayRef.updateSize({ width, height });\n        return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        this.overlayRef.addPanelClass(classes);\n        return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        this.overlayRef.removePanelClass(classes);\n        return this;\n    }\n}\n\n/** Injection token for the Dialog's ScrollStrategy. */\nconst DIALOG_SCROLL_STRATEGY = new InjectionToken('DialogScrollStrategy');\n/** Injection token for the Dialog's Data. */\nconst DIALOG_DATA = new InjectionToken('DialogData');\n/** Injection token that can be used to provide default options for the dialog module. */\nconst DEFAULT_DIALOG_CONFIG = new InjectionToken('DefaultDialogConfig');\n/** @docs-private */\nfunction DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nconst DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Unique id for the created dialog. */\nlet uniqueId = 0;\nclass Dialog {\n    /** Keeps track of the currently-open dialogs. */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    constructor(_overlay, _injector, _defaultOptions, _parentDialog, _overlayContainer, scrollStrategy) {\n        this._overlay = _overlay;\n        this._injector = _injector;\n        this._defaultOptions = _defaultOptions;\n        this._parentDialog = _parentDialog;\n        this._overlayContainer = _overlayContainer;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this._ariaHiddenElements = new Map();\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = defer(() => this.openDialogs.length\n            ? this._getAfterAllClosed()\n            : this._getAfterAllClosed().pipe(startWith(undefined)));\n        this._scrollStrategy = scrollStrategy;\n    }\n    open(componentOrTemplateRef, config) {\n        const defaults = (this._defaultOptions || new DialogConfig());\n        config = { ...defaults, ...config };\n        config.id = config.id || `cdk-dialog-${uniqueId++}`;\n        if (config.id &&\n            this.getDialogById(config.id) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n        }\n        const overlayConfig = this._getOverlayConfig(config);\n        const overlayRef = this._overlay.create(overlayConfig);\n        const dialogRef = new DialogRef(overlayRef, config);\n        const dialogContainer = this._attachContainer(overlayRef, dialogRef, config);\n        dialogRef.containerInstance = dialogContainer;\n        this._attachDialogContent(componentOrTemplateRef, dialogRef, dialogContainer, config);\n        // If this is the first dialog that we're opening, hide all the non-overlay content.\n        if (!this.openDialogs.length) {\n            this._hideNonDialogContentFromAssistiveTechnology();\n        }\n        this.openDialogs.push(dialogRef);\n        dialogRef.closed.subscribe(() => this._removeOpenDialog(dialogRef, true));\n        this.afterOpened.next(dialogRef);\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll() {\n        reverseForEach(this.openDialogs, dialog => dialog.close());\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    ngOnDestroy() {\n        // Make one pass over all the dialogs that need to be untracked, but should not be closed. We\n        // want to stop tracking the open dialog even if it hasn't been closed, because the tracking\n        // determines when `aria-hidden` is removed from elements outside the dialog.\n        reverseForEach(this._openDialogsAtThisLevel, dialog => {\n            // Check for `false` specifically since we want `undefined` to be interpreted as `true`.\n            if (dialog.config.closeOnDestroy === false) {\n                this._removeOpenDialog(dialog, false);\n            }\n        });\n        // Make a second pass and close the remaining dialogs. We do this second pass in order to\n        // correctly dispatch the `afterAllClosed` event in case we have a mixed array of dialogs\n        // that should be closed and dialogs that should not.\n        reverseForEach(this._openDialogsAtThisLevel, dialog => dialog.close());\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n        this._openDialogsAtThisLevel = [];\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param config The dialog configuration.\n     * @returns The overlay configuration.\n     */\n    _getOverlayConfig(config) {\n        const state = new OverlayConfig({\n            positionStrategy: config.positionStrategy ||\n                this._overlay.position().global().centerHorizontally().centerVertically(),\n            scrollStrategy: config.scrollStrategy || this._scrollStrategy(),\n            panelClass: config.panelClass,\n            hasBackdrop: config.hasBackdrop,\n            direction: config.direction,\n            minWidth: config.minWidth,\n            minHeight: config.minHeight,\n            maxWidth: config.maxWidth,\n            maxHeight: config.maxHeight,\n            width: config.width,\n            height: config.height,\n            disposeOnNavigation: config.closeOnNavigation,\n        });\n        if (config.backdropClass) {\n            state.backdropClass = config.backdropClass;\n        }\n        return state;\n    }\n    /**\n     * Attaches a dialog container to a dialog's already-created overlay.\n     * @param overlay Reference to the dialog's underlying overlay.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to a ComponentRef for the attached container.\n     */\n    _attachContainer(overlay, dialogRef, config) {\n        const userInjector = config.injector || config.viewContainerRef?.injector;\n        const providers = [\n            { provide: DialogConfig, useValue: config },\n            { provide: DialogRef, useValue: dialogRef },\n            { provide: OverlayRef, useValue: overlay },\n        ];\n        let containerType;\n        if (config.container) {\n            if (typeof config.container === 'function') {\n                containerType = config.container;\n            }\n            else {\n                containerType = config.container.type;\n                providers.push(...config.container.providers(config));\n            }\n        }\n        else {\n            containerType = CdkDialogContainer;\n        }\n        const containerPortal = new ComponentPortal(containerType, config.viewContainerRef, Injector.create({ parent: userInjector || this._injector, providers }), config.componentFactoryResolver);\n        const containerRef = overlay.attach(containerPortal);\n        return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created dialog container.\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param dialogRef Reference to the dialog being opened.\n     * @param dialogContainer Component that is going to wrap the dialog content.\n     * @param config Configuration used to open the dialog.\n     */\n    _attachDialogContent(componentOrTemplateRef, dialogRef, dialogContainer, config) {\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            const injector = this._createInjector(config, dialogRef, dialogContainer, undefined);\n            let context = { $implicit: config.data, dialogRef };\n            if (config.templateContext) {\n                context = {\n                    ...context,\n                    ...(typeof config.templateContext === 'function'\n                        ? config.templateContext()\n                        : config.templateContext),\n                };\n            }\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, context, injector));\n        }\n        else {\n            const injector = this._createInjector(config, dialogRef, dialogContainer, this._injector);\n            const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector, config.componentFactoryResolver));\n            dialogRef.componentRef = contentRef;\n            dialogRef.componentInstance = contentRef.instance;\n        }\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the dialog.\n     * @param dialogRef Reference to the dialog being opened.\n     * @param dialogContainer Component that is going to wrap the dialog content.\n     * @param fallbackInjector Injector to use as a fallback when a lookup fails in the custom\n     * dialog injector, if the user didn't provide a custom one.\n     * @returns The custom injector that can be used inside the dialog.\n     */\n    _createInjector(config, dialogRef, dialogContainer, fallbackInjector) {\n        const userInjector = config.injector || config.viewContainerRef?.injector;\n        const providers = [\n            { provide: DIALOG_DATA, useValue: config.data },\n            { provide: DialogRef, useValue: dialogRef },\n        ];\n        if (config.providers) {\n            if (typeof config.providers === 'function') {\n                providers.push(...config.providers(dialogRef, config, dialogContainer));\n            }\n            else {\n                providers.push(...config.providers);\n            }\n        }\n        if (config.direction &&\n            (!userInjector ||\n                !userInjector.get(Directionality, null, { optional: true }))) {\n            providers.push({\n                provide: Directionality,\n                useValue: { value: config.direction, change: of() },\n            });\n        }\n        return Injector.create({ parent: userInjector || fallbackInjector, providers });\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param dialogRef Dialog to be removed.\n     * @param emitEvent Whether to emit an event if this is the last dialog.\n     */\n    _removeOpenDialog(dialogRef, emitEvent) {\n        const index = this.openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this.openDialogs.splice(index, 1);\n            // If all the dialogs were closed, remove/restore the `aria-hidden`\n            // to a the siblings and emit to the `afterAllClosed` stream.\n            if (!this.openDialogs.length) {\n                this._ariaHiddenElements.forEach((previousValue, element) => {\n                    if (previousValue) {\n                        element.setAttribute('aria-hidden', previousValue);\n                    }\n                    else {\n                        element.removeAttribute('aria-hidden');\n                    }\n                });\n                this._ariaHiddenElements.clear();\n                if (emitEvent) {\n                    this._getAfterAllClosed().next();\n                }\n            }\n        }\n    }\n    /** Hides all of the content that isn't an overlay from assistive technology. */\n    _hideNonDialogContentFromAssistiveTechnology() {\n        const overlayContainer = this._overlayContainer.getContainerElement();\n        // Ensure that the overlay container is attached to the DOM.\n        if (overlayContainer.parentElement) {\n            const siblings = overlayContainer.parentElement.children;\n            for (let i = siblings.length - 1; i > -1; i--) {\n                const sibling = siblings[i];\n                if (sibling !== overlayContainer &&\n                    sibling.nodeName !== 'SCRIPT' &&\n                    sibling.nodeName !== 'STYLE' &&\n                    !sibling.hasAttribute('aria-live')) {\n                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                    sibling.setAttribute('aria-hidden', 'true');\n                }\n            }\n        }\n    }\n    _getAfterAllClosed() {\n        const parent = this._parentDialog;\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: Dialog, deps: [{ token: i1$1.Overlay }, { token: i0.Injector }, { token: DEFAULT_DIALOG_CONFIG, optional: true }, { token: Dialog, optional: true, skipSelf: true }, { token: i1$1.OverlayContainer }, { token: DIALOG_SCROLL_STRATEGY }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: Dialog }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: Dialog, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i0.Injector }, { type: DialogConfig, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DEFAULT_DIALOG_CONFIG]\n                }] }, { type: Dialog, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: i1$1.OverlayContainer }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DIALOG_SCROLL_STRATEGY]\n                }] }]; } });\n/**\n * Executes a callback against all elements in an array while iterating in reverse.\n * Useful if the array is being modified as it is being iterated.\n */\nfunction reverseForEach(items, callback) {\n    let i = items.length;\n    while (i--) {\n        callback(items[i]);\n    }\n}\n\nclass DialogModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: DialogModule, declarations: [CdkDialogContainer], imports: [OverlayModule, PortalModule, A11yModule], exports: [\n            // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n            // don't have to remember to import it or be faced with an unhelpful error.\n            PortalModule,\n            CdkDialogContainer] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DialogModule, providers: [Dialog, DIALOG_SCROLL_STRATEGY_PROVIDER], imports: [OverlayModule, PortalModule, A11yModule, \n            // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n            // don't have to remember to import it or be faced with an unhelpful error.\n            PortalModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DialogModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, PortalModule, A11yModule],\n                    exports: [\n                        // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n                        // don't have to remember to import it or be faced with an unhelpful error.\n                        PortalModule,\n                        CdkDialogContainer,\n                    ],\n                    declarations: [CdkDialogContainer],\n                    providers: [Dialog, DIALOG_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkDialogContainer, DEFAULT_DIALOG_CONFIG, DIALOG_DATA, DIALOG_SCROLL_STRATEGY, DIALOG_SCROLL_STRATEGY_PROVIDER, DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, Dialog, DialogConfig, DialogModule, DialogRef, throwDialogContentAlreadyAttachedError };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}